<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>MINI</title>
<link>https://nvim-mini.org/blog/</link>
<atom:link href="https://nvim-mini.org/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Modular Independent Neovim Improvements</description>
<generator>quarto-1.8.24</generator>
<lastBuildDate>Mon, 13 Oct 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>MiniMax - Neovim with maximum MINI</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://nvim-mini.org/blog/2025-10-13-announce-minimax.html</link>
  <description><![CDATA[ 





<p>Hello, Neovim users!</p>
<p>It is a huge joy and relief to be able to announce this: there is now an “official” MINI config example. It is called <a href="../MiniMax/index.html">MiniMax</a>.</p>
<p>This release makes today a triple MINI birthday:</p>
<ul>
<li>The ‘mini.nvim’ plugin itself was released <a href="../blog/2021-10-13-announce-mini-nvim.html">four years ago</a>.</li>
<li>The ‘mini.pick’ module was released <a href="../blog/2023-10-13-announce-mini-pick.html">two years ago</a>.</li>
<li>And MiniMax now also has today as its birthday.</li>
</ul>
<hr>
<p>MiniMax is designed to be more than a single config. It is a <a href="../MiniMax/configs/index.html">collection of configs</a>, each specially crafted for specific conditions. Currently it is planned to have a dedicated config for each stable Neovim release, but other conditions are possible (but probably not in the near future). As far as I know, this type of arrangement is pretty unique among existing “preconfigured configurations”. It would make MiniMax useful beyond just configs: with time it might become a good reference for which changes are worth having when changing Neovim versions.</p>
<p>Configs themselves are <a href="../MiniMax/configs/nvim-0.11/index.html">fairly minimal in structure</a>: small ‘init.lua’ and four ‘plugin/’ files that are loaded at startup. Their structure and contents are based on my own config that I’ve been daily driving for a very long time.</p>
<p>In today’s terms, MiniMax is similar to ‘nvim-lua/kickstart.nvim’ in its style. Config files contain a lot of documentation comments and <strong>are meant to be read</strong>. Once you set up MiniMax, it is also up to you to tweak and update it. It is <a href="../MiniMax/index.html#what-it-is-not">not a distro and not a comprehensive guide for everything Neovim</a></p>
<p>Please check it out and tell me what you think. I’d like to focus on making the current state as usable, polished, and typo free as possible. For the time being, suggestions about adding new specific option and/or plugin will not be considered.</p>
<hr>
<p>I would also like to thank <a href="https://github.com/pkazmier">Pete Kazmier</a> for all the helpful feedback during MiniMax development.</p>
<p>And thank <em>you all</em> for your continuous support! Let’s hope to meet again for many more such birthdays to come!</p>



 ]]></description>
  <category>announce</category>
  <guid>https://nvim-mini.org/blog/2025-10-13-announce-minimax.html</guid>
  <pubDate>Mon, 13 Oct 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>MINI now has its own site</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://nvim-mini.org/blog/2025-10-03-announce-site.html</link>
  <description><![CDATA[ 





<p>Hello, Neovim users!</p>
<p>For the entirety of the ‘mini.nvim’/MINI project its main place of documentation was GitHub. It means that “official” links to module READMEs and help files were something like <code>https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-ai.md</code> and <code>https://github.com/nvim-mini/mini.nvim/blob/126ce3328c78399dcff58272f6f540a373b62a75/doc/mini-ai.txt#L1</code>. But not any more!</p>
<p>Please welcome <a href="https://nvim-mini.org">nvim-mini.org</a>! It is a long-time-in-the-works project that is finally public. It required a careful work of updating ‘mini.nvim’ documentation to be usable in both built-in <code>:help</code> and in this auto-generated site (it uses <a href="https://quarto.org/">Quarto</a> and custom Lua scripts).</p>
<p>Here are the improvements a dedicated site brings (apart form adding a bit more credibility to the project):</p>
<ul>
<li><p>Own <a href="../blog/index.html">blog</a> which is already populated with posts I made on Reddit for nearly four years. The main benefit is that it makes it harder to take those posts away from the web, which was a <a href="https://www.reddit.com/r/neovim/comments/1mxxni1/comment/na8h6e3/?context=3">real issue</a> for me, unfortunately. Plus it opens possibilities to create posts that can be freely linked on different blog post aggregation sites.</p></li>
<li><p>Generated ‘mini.nvim’ documentation: both <a href="../mini.nvim/index.html">READMEs</a>, <a href="../mini.nvim/CHANGELOG.html">change log</a>, and <a href="../mini.nvim/doc/mini-nvim.html">help files</a>. The latter is much more readable and usable than linking to a “*.txt” file on GitHub:</p>
<ul>
<li>It has <code>:help</code> like highlighting.</li>
<li>It auto-links tag links (like the one on which you can press <code>&lt;C-]&gt;</code> and navigate to its target), making reading and navigation <strong>much</strong> better. And not only it links within ‘mini.nvim’ tags, it also links to <a href="https://neovim.io">neovim.io</a> documentation for built-in tags as well!</li>
<li>It creates more robust links to help sections (like <a href="../mini.nvim/doc/mini-pick.html#minipick-overview">‘mini.pick’ overview</a>) and change log entries (like <a href="../mini.nvim/CHANGELOG.html#v0.16.0-mini.completion">‘mini.completion’ changes in v0.16.0</a>). The latter is not possible on GitHub because it doesn’t handle duplicating headings very well for this task.</li>
</ul>
<p>There are still downsides to this approach, of course. Links to documentation are not “immutable” (like GitHub’s links to a specific commit) and now only display documentation of the ‘main’ branch. I’ll see what I can do here (like maybe provide snapshots of documentations for releases), but this is not the highest priority right now.</p></li>
<li><p>A more suitable place to document things outside of ‘mini.nvim’ plugin but within MINI project. Which are planned and should be coming soon-ish (I hope)!</p></li>
</ul>
<p>All in all, I am very happy to finally have a dedicated website for the project.</p>
<p>Thank you all for reading this post and supporting MINI. Hope to meet you soon!</p>



 ]]></description>
  <category>announce</category>
  <guid>https://nvim-mini.org/blog/2025-10-03-announce-site.html</guid>
  <pubDate>Fri, 03 Oct 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>New color schemes</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://nvim-mini.org/blog/2025-07-10-announce-new-colorschemes.html</link>
  <description><![CDATA[ 





<p><em>Originally <a href="https://www.reddit.com/r/neovim/comments/1lwdit3/new_mininvim_color_schemes_miniwinter_minispring/">posted on Reddit</a></em></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nvim-mini.org/blog/2025-07-10-announce-new-colorschemes/demo-miniautumn-dark.png" class="img-fluid figure-img"></p>
<figcaption>miniautumn dark</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nvim-mini.org/blog/2025-07-10-announce-new-colorschemes/demo-miniautumn-light.png" class="img-fluid figure-img"></p>
<figcaption>miniautumn light</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nvim-mini.org/blog/2025-07-10-announce-new-colorschemes/demo-minispring-dark.png" class="img-fluid figure-img"></p>
<figcaption>minispring dark</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nvim-mini.org/blog/2025-07-10-announce-new-colorschemes/demo-minispring-light.png" class="img-fluid figure-img"></p>
<figcaption>minispring light</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nvim-mini.org/blog/2025-07-10-announce-new-colorschemes/demo-minisummer-dark.png" class="img-fluid figure-img"></p>
<figcaption>minisummer dark</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nvim-mini.org/blog/2025-07-10-announce-new-colorschemes/demo-minisummer-light.png" class="img-fluid figure-img"></p>
<figcaption>minisummer light</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nvim-mini.org/blog/2025-07-10-announce-new-colorschemes/demo-miniwinter-dark.png" class="img-fluid figure-img"></p>
<figcaption>miniwinter dark</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nvim-mini.org/blog/2025-07-10-announce-new-colorschemes/demo-miniwinter-light.png" class="img-fluid figure-img"></p>
<figcaption>miniwinter light</figcaption>
</figure>
</div>
<p>Hello, Neovim users!</p>
<p>For quite some time I wanted to have more <a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-hues.md">‘mini.hues’</a> based color schemes as part of <a href="https://github.com/nvim-mini/mini.nvim">‘mini.nvim’</a>. There is <code>randomhue</code> (each time randomly generated color scheme), but having something “fixed” is useful for demos and new user experience in general.</p>
<p>This coincided with the fact that for even longer time I was curious why there is no “time of year” inspired set of color schemes. So about 9 months ago I started working on it and daily driving each (dark variant) of them.</p>
<p>And I think it is finally time to release them. So please welcome:</p>
<ul>
<li><code>miniwinter</code>: “icy winter” palette with azure background.</li>
<li><code>minispring</code>: “blooming spring” palette with green background.</li>
<li><code>minisummer</code>: “hot summer” palette with brown/yellow background.</li>
<li><code>miniautumn</code>: “cooling autumn” palette with purple background.</li>
</ul>
<p>I personally enjoy <code>miniwinter</code> the most: I generally tend to like azure/blue backgrounds and yellowy/ivory foregrounds. And light variants of either <code>minispring</code> or <code>minisummer</code> look like genuinely usable light color schemes (which is rather rare).</p>
<p>Please, check them out and tell me what you think! They now (on latest <code>main</code>) come bundled with ‘mini.nvim’ or standalone <a href="https://github.com/nvim-mini/mini.hues">‘mini.hues’</a> repository.</p>
<p>Obligatory notes:</p>
<ul>
<li>The font is a <a href="https://github.com/echasnovski/dotfiles/blob/master/fonts/.local/share/fonts/IosevkaInput/IosevkaInput-build-plans.toml">very customized Iosevka build</a> inspired by “Input Mono” font.</li>
</ul>
<p>Thanks!</p>



 ]]></description>
  <category>announce</category>
  <category>reddit</category>
  <guid>https://nvim-mini.org/blog/2025-07-10-announce-new-colorschemes.html</guid>
  <pubDate>Thu, 10 Jul 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Release 0.16.0</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://nvim-mini.org/blog/2025-05-20-release-0160.html</link>
  <description><![CDATA[ 





<p><em>Originally <a href="https://www.reddit.com/r/neovim/comments/1kr4or7/mininvim_release_0160_smart_mappings_better/">posted on Reddit</a></em></p>
<p>Hello, Neovim users!</p>
<p>The <a href="https://github.com/nvim-mini/mini.nvim">mini.nvim</a> plugin has released a new 0.16.0 version. The previous release was about 4 months and 250 commits ago, so it felt like the right time. Here is a <a href="https://github.com/nvim-mini/mini.nvim/releases/tag/v0.16.0">full release description</a> if you are curious.</p>
<hr>
<p>There is only one new module, but it fixes some common issues when it comes to mappings:</p>
<ul>
<li><a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-keymap.md">mini.keymap</a> - Special key mappings. It has two main features: multi-step actions (like “smart” tab, shift-tab, enter, backspace) and combos (more general “better escape” like behavior). You can read more in <a href="../blog/2025-05-03-announce-mini-keymap.html">this release post</a>.</li>
</ul>
<hr>
<p>The main attention in this release cycle went towards revamping ‘mini.completion’ with long overdue features like snippet support (made fully possible after release of ‘mini.snippets’), better highlighting and scroll support in info/signature windows, overall more proper coverage of LSP capabilities, and various quality of life improvements. There was a <a href="../blog/2025-03-07-update-mini-completion-snippet-support.html">release post</a>, but full changelog is <a href="https://github.com/nvim-mini/mini.nvim/blob/main/CHANGELOG.md#minicompletion">here</a> (there were new changes after the post).</p>
<hr>
<p>A lot of effort was put into unifying certain behavior across all modules:</p>
<ul>
<li>How floating windows are displayed: better titles, ‘single’ border by default but respecting new ‘winborder’ options, etc.</li>
<li>Naming scheme for special module-specific buffers, which makes buffer list and some custom actions clearer.</li>
<li>Stop handling general options behind <code>set_vim_settings</code> config value in favor of setting them automatically if they were not already set by the user.</li>
</ul>
<hr>
<p>Various plugins got small and not so much updates. Here are some of them:</p>
<ul>
<li>‘mini.ai’ and ‘mini.surround’ got better support of tree-sitter captures and non-latin textobject/surrounding identifiers.</li>
<li>‘mini.diff’ got the ability to set array of sources to attempt to attach them one at a time. This allows having setup like “try attach Git source, but fall back to custom Mercurial source” (there might be built-in sources for other VCS in the future).</li>
<li>‘mini.operators’ now remaps built-in <code>gx</code> (open URL under cursor) to <code>gX</code> if the <code>exchange</code> operator is about to override it.</li>
<li>‘mini.pairs’ now support multibyte characters in pairs.</li>
<li>‘mini.pick’ now has more highlighting customizations of prompt and better scripting capabilities for setting current and marked matches.</li>
<li>‘mini.snippets’ has <code>start_lsp_server()</code> that starts an in-process LSP server that provides completion suggestions from snippets loaded via ‘mini.snippets’. This integrates well with ‘mini.completion’.</li>
<li>‘mini.tabline’ now shows special truncation symbols on left and/or right if there are more text to the left/right.</li>
</ul>
<hr>
<p>Thanks for the continued support of ‘mini.nvim’ project! We are past 7.2K stars now 🌟❤️ I still have a lot of ideas I want to add to ‘mini.nvim’ to make it even better. I also plan to spend some time implementing several important features in upstream Neovim. So stay tuned!</p>
<p>Hope to see you soon with new and exciting updates!</p>



 ]]></description>
  <category>release</category>
  <category>reddit</category>
  <guid>https://nvim-mini.org/blog/2025-05-20-release-0160.html</guid>
  <pubDate>Tue, 20 May 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Announcing ‘mini.keymap’</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://nvim-mini.org/blog/2025-05-03-announce-mini-keymap.html</link>
  <description><![CDATA[ 





<p><em>Originally <a href="https://www.reddit.com/r/neovim/comments/1kdrhjn/minikeymap_make_special_key_mappings_multistep/">posted on Reddit</a></em></p>
<div class="quarto-video"><video id="video_shortcode_videojs_video1" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="2025-05-03-announce-mini-keymap/demo.mp4"></video></div>
<p>Hello, Neovim users!</p>
<p>I invite you to break a long pause between new <a href="https://github.com/nvim-mini/mini.nvim">mini.nvim</a> module releases together with <a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-keymap.md">‘mini.keymap’</a>. It can also be installed using <a href="https://github.com/nvim-mini/mini.keymap">separate GitHub repository</a>.</p>
<hr>
<p>This module is aimed to solve three pressing issues:</p>
<ul>
<li><p>Provide a way to tie together different modules/plugins which can use <code>&lt;Tab&gt;</code> / <code>&lt;S-Tab&gt;</code> / <code>&lt;CR&gt;</code> / <code>&lt;BS&gt;</code> keys in Insert mode. These are usually known as “smart” keys, but ‘mini.keymap’ offers a more general and customizable alternative of “multi-step actions”.</p></li>
<li><p>Resolve <a href="https://github.com/nvim-mini/mini.nvim/issues/86">the oldest open feature request</a> for adding “better escape” like functionality into ‘mini.nvim’. I personally prefer exiting into Normal mode with <code>&lt;C-S&gt;</code> (which also saves), but I can see the appeal of <code>jk</code>. Maybe I’ll try to get used to it. Besides, the end result in ‘mini.keymap’ (called “combo”) is more versatile.</p></li>
<li><p>The upcoming ‘mini.nvim’ release 0.16.0 will be mostly about <a href="../blog/2025-03-07-update-mini-completion-snippet-support.html">new ‘mini.completion’ features</a> and many new features in other modules. But I’d like for every stable release to provide at least one new module. So here we are.</p></li>
</ul>
<hr>
<p>Features of ‘mini.keymap’:</p>
<ul>
<li><p>Map keys to perform configurable multi-step actions: if condition for step one is true - execute step one action, else check step two, and so on until falling back to executing original keys. This is usually referred to as “smart” keys (like “smart tab”).</p>
<p>There are many built-in steps targeted for Insert mode mappings of special keys like <code>&lt;Tab&gt;</code>, <code>&lt;S-Tab&gt;</code>, <code>&lt;CR&gt;</code>, and <code>&lt;BS&gt;</code>. Here is the <a href="https://github.com/nvim-mini/mini.nvim/blob/ee23e1abc206efc6d6cce19ec8c0a3da7a897035/doc/mini-keymap.txt#L220-L261">full list</a> and <a href="https://github.com/nvim-mini/mini.nvim/blob/ee23e1abc206efc6d6cce19ec8c0a3da7a897035/doc/mini-keymap.txt#L81-L126">some common examples</a>. More plugin might support in the future (like for accepting inline completion and “next text edit”), but having as much coverage as possible is not the goal.</p></li>
<li><p>Map keys as “combo”: each key acts immediately plus execute extra action if all are typed within configurable delay between each other. Some of the common use cases include:</p>
<ul>
<li>Map insertable keys to exit into Normal mode (as this won’t have side effects like <code>inoremap jk &lt;Esc&gt;</code>).</li>
<li>Show a notification if there are too many same navigation keys pressed (to break bad habits).</li>
</ul>
<p>Here are <a href="https://github.com/nvim-mini/mini.nvim/blob/ee23e1abc206efc6d6cce19ec8c0a3da7a897035/doc/mini-keymap.txt#L127-L182">more examples</a>.</p></li>
</ul>
<hr>
<p>Please, check it out and tell me what you think! You can leave your suggestions either here in comments or in dedicated <a href="https://github.com/nvim-mini/mini.nvim/issues/1780">beta-testing issue</a>. I’d also like to collect ideas about useful combos that are not convenient to be done as a regular mapping.</p>
<p>Thanks!</p>



 ]]></description>
  <category>announce</category>
  <category>reddit</category>
  <guid>https://nvim-mini.org/blog/2025-05-03-announce-mini-keymap.html</guid>
  <pubDate>Sat, 03 May 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Updates of ‘mini.completion’: snippet support (finally)</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://nvim-mini.org/blog/2025-03-07-update-mini-completion-snippet-support.html</link>
  <description><![CDATA[ 





<p><em>Originally <a href="https://www.reddit.com/r/neovim/comments/1j5n8y7/minicompletion_now_finally_has_snippet_support/">posted on Reddit</a></em></p>
<p>Hello, Neovim users!</p>
<p>The <a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-completion.md">‘mini.completion’</a> module of ‘mini.nvim’ plugin has accumulated visible number of changes on latest <code>main</code> branch. As some of them were requested fairly often, I decided to make a separate post about it.</p>
<p>The main improvement is (finally) added snippet support. That is, ‘mini.completion’ now can properly insert snippet completion entries. The main attention has gone into making it work with enabled <a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-snippets.md">‘mini.snippets’</a> module, but there is automated fallback to <code>vim.snippet</code> (on Neovim&gt;=0.10).</p>
<p>Other updates include:</p>
<ul>
<li>Default mappings for scrolling down/up in both info/signature windows. Those are <code>&lt;C-f&gt;</code> and <code>&lt;C-b&gt;</code>, but can be configured (be careful with <code>&lt;C-d&gt;</code> and <code>&lt;C-u&gt;</code>, as they have special meaning during active built-in completion popup).</li>
<li>Significantly better highlighting in info/signature windows.</li>
<li>Support for <code>isIncomplete</code>, which means there will be automated update of completion list on the next key press if initial response from LSP server did not contain all possible items.</li>
<li>Better handling of label details and documentation, i.e.&nbsp;which goes into initial popup and which goes into info window.</li>
<li>Slightly different default UI for info and signature window: with border and title.</li>
</ul>
<p>Here is a <a href="https://github.com/nvim-mini/mini.nvim/blob/main/CHANGELOG.md#minicompletion">CHANGELOG entry</a> with more details thus far and here is an <a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-completion.md#demo">updated demo</a> (done in Neovim=0.11 which soon-ish should be released as stable).</p>
<hr>
<p>These updates took <strong>a lot</strong> longer than I would have liked. Ignoring non-development related issues, this seems to be a result of my personal mental block when working with LSP related things. I think this is due to multiplied complexity from 1) LSP specification; 2) having to deal with different servers implementing it slightly differently; and 3) sometimes Neovim itself (mostly by having to deal with Vim’s legacy part).</p>
<p>Doing one small step at a time definitely helped me here and I am happy this part is over. There are still plans for LSP related functionality (making in-process LSP server for snippets loaded with ‘mini.snippets’ and adding create/rename/delete LSP support in ‘mini.files’), so time to relax will not be long :)</p>
<hr>
<p>Thanks for taking interest in ‘mini.nvim’ project and ‘mini.completion’ in particular! If you experience issues after these updates (and I imagine there will be), please create an issue/discussion and we can look into it.</p>
<p>Hope to see you soon with new and exciting updates!</p>



 ]]></description>
  <category>update</category>
  <category>reddit</category>
  <guid>https://nvim-mini.org/blog/2025-03-07-update-mini-completion-snippet-support.html</guid>
  <pubDate>Fri, 07 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Release 0.15.0</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://nvim-mini.org/blog/2025-01-30-release-0150.html</link>
  <description><![CDATA[ 





<p><em>Originally <a href="https://www.reddit.com/r/neovim/comments/1idnotw/mininvim_release_0150_snippets_plus_various/">posted on Reddit</a></em></p>
<p>Hello, Neovim users!</p>
<p>The <a href="https://github.com/nvim-mini/mini.nvim">mini.nvim</a> plugin has released a new 0.15.0 version. It has been a bit more than four months and 168 commits since the latest release, so the new one is long overdue. Here is a <a href="https://github.com/nvim-mini/mini.nvim/releases/tag/v0.15.0">full release description</a> if you are curious.</p>
<hr>
<p>The main new feature is that one (big and important) module is coming out of beta-testing:</p>
<ul>
<li><a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-snippets.md">mini.snippets</a> - manage and expand snippets. It is a minimal yet feature-rich way of managing snippets combined with own implementation of LSP snippet parsing/insert. You can read more in <a href="../blog/2024-12-23-announce-mini-snippets.html">this release post</a>.</li>
</ul>
<p>It proved to be one of the most tasking module to write, for various reasons. But we’ve overcome this :)</p>
<hr>
<p>The rest of release cycle I wanted to dedicate to adding snippet support to ‘mini.completion’ (including ‘mini.snippets’ integration through in-process LSP server) and overall backlog cleaning. The cleaning is taking too long (for again various reasons) and is not even finished yet. So I decided to make a release now (especially with so much time after the previous one) and improve ‘mini.completion’ later.</p>
<p>A lot of existing plugins got new updates. Here are the highlights:</p>
<ul>
<li><p>‘mini.files’ confirm approach was updated:</p>
<ul>
<li>Synchronization can now be canceled (instead of only skipping applying file system actions). This will return to the explorer’s state as it was prior to sync start.</li>
<li>Closing explorer now asks for confirmation only if there are pending file system actions (and not <em>just</em> modified buffers).</li>
</ul></li>
<li><p>‘mini.hues’ has two more saturation levels: <code>'lowmedium'</code> and <code>'mediumhigh'</code>.</p></li>
<li><p>‘mini.indentscope’ now is:</p>
<ul>
<li>More responsive on huge (10K+) scopes via introducing <code>n_lines</code> option that limits the scope computation.</li>
<li>More customizable via <code>draw.predicate</code>, which can be used to decide when a scope is drawn.</li>
</ul></li>
<li><p>‘mini.pick’ got substantial updates:</p>
<ul>
<li><code>grep</code> and <code>grep_live</code> pickers now allow <code>globs</code> to limit search in particular globs. There is also a new built-in <code>&lt;C-o&gt;</code> mapping to add a single glob pattern.</li>
<li>Picker window now sets window-local working directory (the one that is printed with <code>:pwd</code>) to picker’s working directory for a more correct processing when picker’s cwd differs from a Neovim’s one.</li>
<li>A new <code>MiniPickMatch</code> event allows customizing picker on every query match update (like customizing height to only fit matches).</li>
</ul></li>
<li><p>And more.</p></li>
</ul>
<hr>
<p>Thanks for the continued support of ‘mini.nvim’ project! We are past 6.4K stars now ❤️</p>
<p>Hope to see you soon with new and exciting updates!</p>



 ]]></description>
  <category>release</category>
  <category>reddit</category>
  <guid>https://nvim-mini.org/blog/2025-01-30-release-0150.html</guid>
  <pubDate>Thu, 30 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Announcing ‘mini.snippets’</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://nvim-mini.org/blog/2024-12-23-announce-mini-snippets.html</link>
  <description><![CDATA[ 





<p><em>Originally <a href="https://www.reddit.com/r/neovim/comments/1hknze1/minisnippets_manage_and_expand_snippets_lsp/">posted on Reddit</a></em></p>
<div class="quarto-video"><video id="video_shortcode_videojs_video1" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="2024-12-23-announce-mini-snippets/demo.mp4"></video></div>
<p>Hello, Neovim users!</p>
<p>Let’s celebrate passed December solstice with the long overdue release of <a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-snippets.md">mini.snippets</a> - new module of <a href="https://github.com/nvim-mini/mini.nvim">mini.nvim</a> that can manage and expand snippets. It can also be installed using <a href="https://github.com/nvim-mini/mini.snippets">separate GitHub repository</a>.</p>
<hr>
<p>Snippets are a vital part of my editing workflow. That’s why I wanted to have ‘mini.snippets’ for about 3 years now. My initial plan was to wait and utilize snippet expansion capabilities in core and implement only snippet management (find/load/match/etc). And indeed, when <code>vim.snippet</code> became a thing in 0.10 back in May I used it together with some small set of commonly used snippets.</p>
<p>Due to time consuming development of ‘mini.icons’ and cleaning ‘mini.nvim’ feature backlog, I started ‘mini.snippets’ mid-September. It proved to be outstandingly long development period for various reasons: both external and internal. Some of them are:</p>
<ul>
<li><p>Desire to make things “right”: robust yet flexible, out-of-the-box yet customizable. There were many iterations of back and forth, which were as late as several days ago. Eventually it converged into <em>something</em>, let’s hope it is enough.</p></li>
<li><p>Although very capable already, some decisions about <code>vim.snippet</code> direction proved to not sit well with me (not wanting to add dedicated events and forcing <code>&lt;Tab&gt;</code>/<code>&lt;S-Tab&gt;</code> overrides are the main ones). It resulted in a long internal debate about whether having own snippet parsing and interactive session is worth it. The fact that I needed to interact with LSP specification (which I am not very good at) made own implementation even less compelling.</p>
<p>In the end I managed to come up with several distinctive snippet session features that I realized I wanted to have for a long time: no Select mode mappings (extra complexity and visually not adjustable), dynamic highlighting, ability to not stop session immediately at final tabstop, etc. That eventually got me nerd-sniped (by myself, mind you) into deciding to take it on.</p></li>
<li><p>Snippet LSP specification is compact, but at the same time allows a lot of weird cases which need to be accounted for (mostly because of nested placeholders and linked tabstops). Finding and addressing them also took many sleepless nights.</p>
<p>Plus all the tests and documentation… <strong>a lot</strong> of tests and documentation.</p></li>
</ul>
<p>But the main thing is that ‘mini.snippets’ is out and it is <strong>good</strong>. This should take a bit of weight out of my shoulders.</p>
<p>Next thing (after a bit of backlog cleanup) is to add another long overdue feature: snippet support in ‘mini.completion’. As it also requires LSP related work, it might take a while (again).</p>
<hr>
<p>Features:</p>
<ul>
<li><p>Manage snippet collection by adding it explicitly or with a flexible set of performant built-in loaders. See <a href="https://github.com/nvim-mini/mini.nvim/blob/2011aff270bcd3e1f3ad088253ace2d574967bed/doc/mini-snippets.txt#L702"><code>MiniSnippets.gen_loader</code></a>.</p></li>
<li><p>Configured snippets are efficiently resolved before every expand based on current local context. This, for example, allows using different snippets in different local tree-sitter languages (like in markdown code blocks). See <a href="https://github.com/nvim-mini/mini.nvim/blob/2011aff270bcd3e1f3ad088253ace2d574967bed/doc/mini-snippets.txt#L837"><code>MiniSnippets.default_prepare()</code></a>.</p></li>
<li><p>Match which snippet to insert based on the currently typed text. Supports both exact and fuzzy matching. See <a href="https://github.com/nvim-mini/mini.nvim/blob/2011aff270bcd3e1f3ad088253ace2d574967bed/doc/mini-snippets.txt#L884"><code>MiniSnippets.default_match()</code></a>.</p></li>
<li><p>Select from several matched snippets via <code>vim.ui.select()</code>. See <a href="https://github.com/nvim-mini/mini.nvim/blob/2011aff270bcd3e1f3ad088253ace2d574967bed/doc/mini-snippets.txt#L923"><code>MiniSnippets.default_select()</code></a>.</p></li>
<li><p>Insert, jump, and edit during snippet session in a configurable manner:</p>
<ul>
<li>Configurable mappings for jumping and stopping.</li>
<li>Jumping wraps around the tabstops for easier navigation.</li>
<li>Easy to reason rules for when session automatically stops.</li>
<li>Text synchronization of linked tabstops.</li>
<li>Dynamic tabstop state visualization (current/visited/unvisited, etc.)</li>
<li>Inline visualization of empty tabstops (requires Neovim&gt;=0.10).</li>
<li>Works inside comments by preserving comment leader on new lines.</li>
<li>Supports nested sessions (expand snippet while there is an one active).</li>
</ul>
<p>See <a href="https://github.com/nvim-mini/mini.nvim/blob/2011aff270bcd3e1f3ad088253ace2d574967bed/doc/mini-snippets.txt#L943"><code>MiniSnippets.default_insert()</code></a>.</p></li>
<li><p>Exported function to parse snippet body into easy-to-reason data structure. See <a href="https://github.com/nvim-mini/mini.nvim/blob/2011aff270bcd3e1f3ad088253ace2d574967bed/doc/mini-snippets.txt#L1127"><code>MiniSnippets.parse()</code></a>.</p></li>
</ul>
<hr>
<p>Please, check it out and tell me what you think! You can leave your suggestions either here in comments or in dedicated <a href="https://github.com/nvim-mini/mini.nvim/issues/1428">beta-testing issue</a>.</p>
<p>Thanks!</p>



 ]]></description>
  <category>announce</category>
  <category>reddit</category>
  <guid>https://nvim-mini.org/blog/2024-12-23-announce-mini-snippets.html</guid>
  <pubDate>Mon, 23 Dec 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Release 0.14.0</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://nvim-mini.org/blog/2024-09-26-release-0140.html</link>
  <description><![CDATA[ 





<p><em>Originally <a href="https://www.reddit.com/r/neovim/comments/1fpx6q3/mininvim_release_0140_icons_icons_everywhere_plus/">posted on Reddit</a></em></p>
<p>Hello, Neovim users!</p>
<p>Today is the day for yet another stable release of <a href="https://github.com/nvim-mini/mini.nvim">mini.nvim</a>, now version 0.14.0 (they grow up so fast). Here is a <a href="https://github.com/nvim-mini/mini.nvim/releases/tag/v0.14.0">full release description</a> if you are curious.</p>
<hr>
<p>This release marks only a single module coming out of beta-testing:</p>
<ul>
<li><a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-icons.md">mini.icons</a> - a general icons provider. It is meant to be a more versatile ‘nvim-tree/nvim-web-devicons’ replacement which relies on built-in <code>vim.filetype.match()</code> for a more fine-grained icon detection rules and which implements highlight group design with easier blending for any color scheme. You can also read <a href="../blog/2024-07-03-announce-mini-icons.html">this release post</a>.</li>
</ul>
<p>This module came with a lot of extra burden:</p>
<ul>
<li><p>Switch existing modules which rely on ‘nvim-web-devicons’ to prefer ‘mini.icons’ instead. Those are ‘mini.files’, ‘mini.pick’, ‘mini.statusline’, ‘mini.tabline’.</p></li>
<li><p>Update popular color schemes to define ‘mini.icons’ highlight groups for a better “out of the box” experience for most users.</p></li>
<li><p>Make changes to Neovim itself for a faster <code>vim.filetype.match()</code>. Unfortunately, this took <strong>a lot</strong> of mental effort to both get right and debate with core maintainers that it is even worth merging.</p></li>
</ul>
<hr>
<p>The rest of release cycle I decided to dedicate to clean up feature backlog and do overall maintenance. As a result, a lot of existing plugins got new and exciting features. Here are the highlights:</p>
<ul>
<li><p>‘mini.files’ got the most attention: bookmarks, better file manipulation, and more. Here is a <a href="../blog/2024-09-03-update-mini-files-bookmarks.html">separate post</a> about it.</p></li>
<li><p>‘mini.completion’ now also integrates with ‘mini.icons’:</p>
<ul>
<li>It can show icons near LSP item kind (like “Function”, “Class”, etc.) after an indirect call to <a href="https://github.com/nvim-mini/mini.nvim/blob/64e95aa77587d04f97a5579b2106a82a08a7d968/doc/mini-icons.txt#L481"><code>MiniIcons.tweak_lsp_kind()</code></a>.</li>
<li>It can highlight LSP item kind. Requires set up ‘mini.icons’ and Neovim&gt;=0.11 (current Nightly).</li>
</ul></li>
<li><p>‘mini.misc’ got new <code>setup_termbg_sync()</code> function which can set up terminal background synchronization to remove possible “frame” around current Neovim instance. Or you can use advice from <a href="https://echasnovski.com/blog/2024-08-01-remove-padding-around-neovim-instance.html">this post</a>.</p></li>
<li><p>‘mini.pick’ now uses full height character “│” instead of previous “:” to separate file name, line, column, and text. The full change is slightly more complicated, though, so see changelog.</p></li>
<li><p>Many pickers from ‘mini.extra’ now also integrate ‘mini.icons’: both for file and LSP kind.</p></li>
<li><p>‘mini.test’ now can work on Windows. All that was missing was essentially a one line change in how pipe is created. Huge thanks to <a href="https://github.com/cameronr"><span class="citation" data-cites="cameronr">@cameronr</span></a> for <a href="https://github.com/nvim-mini/mini.nvim/pull/1101">this PR</a>.</p></li>
<li><p>And many more.</p></li>
</ul>
<hr>
<p>Overall maintenance also was fruitful:</p>
<ul>
<li><p>Help pages now use Neovim-specific way of highlighting code blocks.</p></li>
<li><p>Thanks to ‘mini.test’ PR, I was finally able to set up CI tests for Windows (and also decided to add MacOS). Updating tests themselves required a gruesome amount of tedious effort (as I don’t have local access to any of those OSs), but it was worth it.</p></li>
<li><p>All modules now uniformly ensure that their highlight groups are defined for any color scheme. It was not the case previously as usually the <code>:colorscheme ...</code> call clears all highlight groups before defining its own and ‘mini.nvim’ did not account for that.</p></li>
</ul>
<hr>
<p>Thanks for expressing an ever growing interest in ‘mini.nvim’ project!</p>
<p>Hope to see you soon with some exciting updates!</p>



 ]]></description>
  <category>release</category>
  <category>reddit</category>
  <guid>https://nvim-mini.org/blog/2024-09-26-release-0140.html</guid>
  <pubDate>Thu, 26 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Updates of ‘mini.files’: bookmarks</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://nvim-mini.org/blog/2024-09-03-update-mini-files-bookmarks.html</link>
  <description><![CDATA[ 





<p><em>Originally <a href="https://www.reddit.com/r/neovim/comments/1f7zrjt/minifiles_updates_bookmarks_better_file/">posted on Reddit</a></em></p>
<p>Hello, Neovim users!</p>
<p>TL;DR: here is a <a href="https://github.com/nvim-mini/mini.nvim/blob/main/CHANGELOG.md#minifiles">full list of changes since last release</a>. I’d be grateful if you could test them and give your feedback before the next ‘mini.nvim’ release.</p>
<hr>
<p>During the current version iteration of <a href="https://github.com/nvim-mini/mini.nvim/">‘mini.nvim’</a> I decided to spread my attention to already existing modules for overall maintenance and backlog cleanup. ‘mini.files’ got the most attention among those, so I’d like to ask its users to test new changes before the next ‘mini.nvim’ release. The full list of changes is at the beginning of the post, but here are important highlights of recent activity:</p>
<ul>
<li><p>‘mini.files’ now implements bookmarks, which act similar to built-in marks:</p>
<ul>
<li><code>m&lt;char&gt;</code> sets directory path of focused window as bookmark with id <code>&lt;char&gt;</code>.</li>
<li><code>'&lt;char&gt;</code> makes bookmark path focused.</li>
<li><code>set_bookmark()</code> can set custom bookmarks from script. Here is <a href="https://github.com/nvim-mini/mini.nvim/blob/eb0f557a5797cfe9c720ed84a71582c22bccb4f8/doc/mini-files.txt#L521">an example</a>.</li>
</ul>
<p>The main motivation for this was that move/copy files across different directories was tricky without quick way to switch between them. Now they are a single <code>'a</code> / <code>'b</code> away from each other (needs conscious decision of creating them, though).</p></li>
<li><p>Complex cases of file manipulation (like delete ‘file-a’ and copy ‘file-b’ as ‘file-a’ in a single synchronization) are now properly resolved. It is not 100% full proof (intentionally), so I’d still suggest splitting tasks into independent steps.</p></li>
<li><p>Confirmation info now uses relative paths inside action description as much as possible. It is also now intentionally aligned.</p></li>
<li><p><code>get_target_window()</code> is now soft deprecated (works for now, but will be removed after the next ‘mini.nvim’ release) in favor of a <code>get_explorer_state().target_window</code>. This was an oversight because I didn’t want to fix the whole <code>explorer</code> data structure (and later realised that I didn’t have to). Sorry about that.</p></li>
</ul>
<p>You can leave your feedback/issues/suggestions here, create a <a href="https://github.com/nvim-mini/mini.nvim/discussions/categories/q-a">question</a> (if it wasn’t <a href="https://github.com/nvim-mini/mini.nvim/discussions/categories/q-a?discussions_q=is%3Aclose+category%3AQ%26A+label%3Amini.files">already asked before</a>), or create an issue (if it wasn’t already create before).</p>
<p>Thanks!</p>
<p><strong>Edit</strong>: if you are curious to read about my journey to implementing bookmarks, <a href="https://github.com/nvim-mini/mini.nvim/issues/928">this issue</a> contains some thought process for possible future reference.</p>



 ]]></description>
  <category>update</category>
  <category>reddit</category>
  <guid>https://nvim-mini.org/blog/2024-09-03-update-mini-files-bookmarks.html</guid>
  <pubDate>Tue, 03 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Announcing ‘mini.icons’</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://nvim-mini.org/blog/2024-07-03-announce-mini-icons.html</link>
  <description><![CDATA[ 





<p><em>Originally <a href="https://www.reddit.com/r/neovim/comments/1duf3w7/miniicons_general_icon_provider_several/">posted on Reddit</a></em></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nvim-mini.org/blog/2024-07-03-announce-mini-icons/demo-glyph-dark.png" class="img-fluid figure-img"></p>
<figcaption>Default “glyph” style and dark color scheme</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nvim-mini.org/blog/2024-07-03-announce-mini-icons/demo-glyph-light.png" class="img-fluid figure-img"></p>
<figcaption>Default “glyph” style and light color scheme</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nvim-mini.org/blog/2024-07-03-announce-mini-icons/demo-ascii.png" class="img-fluid figure-img"></p>
<figcaption>Fallback “ascii” style</figcaption>
</figure>
</div>
<p>Hello, Neovim users!</p>
<p>Let us rejoice at the release of <a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-icons.md">mini.icons</a> - new module of <a href="https://github.com/nvim-mini/mini.nvim">mini.nvim</a> intended to be a general icon provider. It can also be installed using <a href="https://github.com/nvim-mini/mini.icons">separate GitHub repository</a>.</p>
<hr>
<p>As recent releases of ‘mini.diff’ and ‘mini.git’ allowed ‘mini.statusline’ to require one less external dependency (‘lewis6991/gitsigns.nvim’), I’ve got curious if ‘nvim-tree/nvim-web-devicons’ replacement can be fit in ‘mini.nvim’ design. Having custom solution for icons would benefit at least four modules (and probably more), so it seemed worth it. In the end, I found the approach that works for me and is based on several ideas:</p>
<ul>
<li><p>Have the same “one main function to get icon and its highlight group” idea as ‘nvim-web-devicons’, but be more flexible and future proof. It explicitly requires category (like “file”, “extension”, “directory”, etc.) and icon names (while ‘nvim-web-devicons’ mostly has only “file”, “extension”, and “filetype”).</p></li>
<li><p>Follow an already established route in ‘mini.nvim’ and provide a fixed set of highlight groups which are used in the module. This allows better color scheme integration (both out of the box and inside color scheme) and easier bulk customization.</p></li>
<li><p>Provide fallback for users which can not use Nerd Fonts glyphs but still want their Neovim experience to be as beautiful as possible. This is achieved with <code>config.style = 'ascii'</code> setting (see screenshots).</p></li>
</ul>
<hr>
<p>Although the actual code logic is comparatively small, the major time consuming hurdles with ‘mini.icons’ were around it:</p>
<ul>
<li><p>Compile common cases to explicitly support for various categories. The most effort needed to be put in ‘filetype’ support, as it is used as a fallback for richer Neovim integration. The current count of supported filetypes is a whopping 780!</p></li>
<li><p>Go through each icon to actually assign Nerd Fonts glyph and highlighting. It was monotonous but fun experience.</p></li>
<li><p>Make PRs to popular Neovim color schemes for you to have a better out of the box experience right after ‘mini.icons’ release. Ended up with 16 PRs!</p></li>
<li><p>Update relevant modules to prefer ‘mini.icons’ instead of ‘nvim-web-devicons’ (in backwards compatible way, of course). So now all ‘mini.statusline’, ‘mini.tabline’, ‘mini.files’, and ‘mini.pick’ use ‘mini.icons’ (if it is set up).</p></li>
</ul>
<hr>
<p>Features:</p>
<ul>
<li><p>Provide icons with their highlighting via a single <code>MiniIcons.get()</code> for various categories: filetype, file/directory path, extension, operating system, LSP kind values. Icons and category defaults can be overridden.</p></li>
<li><p>Configurable styles: “glyph” (icon glyphs) or “ascii” (non-glyph fallback).</p></li>
<li><p>Fixed set of highlight groups (linked to built-in groups by default) for better blend with color scheme.</p></li>
<li><p>Caching for maximum performance.</p></li>
<li><p>Integration with <code>vim.filetype.add()</code> and <code>vim.filetype.match()</code>.</p></li>
<li><p>Mocking methods of ‘nvim-tree/nvim-web-devicons’ for better integrations with plugins outside ‘mini.nvim’. See <a href="https://github.com/nvim-mini/mini.nvim/blob/bc6c0f7b49d71716c996a9422a46bbe5badec8ca/doc/mini-icons.txt#L356"><code>MiniIcons.mock_nvim_web_devicons()</code></a>.</p></li>
</ul>
<hr>
<p>I sincerely hope that you give ‘mini.icons’ a try. With its final result, I think it is a better alternative to ‘nvim-web-devicons’; both for end users and plugin authors. Here are the more detailed comparisons <a href="https://github.com/nvim-mini/mini.nvim/blob/bc6c0f7b49d71716c996a9422a46bbe5badec8ca/doc/mini-icons.txt#L58">for users</a> and <a href="https://github.com/nvim-mini/mini.nvim/blob/bc6c0f7b49d71716c996a9422a46bbe5badec8ca/doc/mini-icons.txt#L85">for plugin authors</a>. Besides, as a user you can add <code>MiniIcons.mock_nvim_web_devicons()</code> to your config and it should work with other plugins which support only ‘nvim-web-devicons’ (yet).</p>
<p>Please, check it out and tell me what you think! You can leave your suggestions either here in comments or in dedicated <a href="https://github.com/nvim-mini/mini.nvim/issues/1007">beta-testing issue</a>.</p>
<p>Thanks!</p>



 ]]></description>
  <category>announce</category>
  <category>reddit</category>
  <guid>https://nvim-mini.org/blog/2024-07-03-announce-mini-icons.html</guid>
  <pubDate>Wed, 03 Jul 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Release 0.13.0</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://nvim-mini.org/blog/2024-06-13-release-0130.html</link>
  <description><![CDATA[ 





<p><em>Originally <a href="https://www.reddit.com/r/neovim/comments/1df0qzu/mininvim_release_0130_two_new_modules_visible/">posted on Reddit</a></em></p>
<p>Hello, Neovim users!</p>
<p>Today is the release day of <a href="https://github.com/nvim-mini/mini.nvim">mini.nvim</a> version 0.13.0. It includes two new quite feature-rich modules coming out of beta-testing, some breaking features for existing modules, and a few small updates for other modules.</p>
<p>This release marks the crossing of curiously aligned milestones. The ‘mini.nvim’ project now has: - 40+ modules. - 4000+ GitHub stars (thank you all for your support ❤️). - 4000+ test cases.</p>
<p>Here is a <a href="https://github.com/nvim-mini/mini.nvim/releases/tag/v0.13.0">full release description</a> if you are curious.</p>
<hr>
<p>Two new modules coming out of beta-testing:</p>
<ul>
<li><p><a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-diff.md">mini.diff</a> - module to interactively visualize difference between buffer text and its reference. This is basically a ‘mini.nvim’ version of ‘lewis6991/gitsigns.nvim’, but with more general design towards reference text (not only from Git index) and a bit different way to show inline difference (called “overlay”).</p></li>
<li><p><a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-git.md">mini.git</a> - module for a tighter Git integration. Its primary goal is to track per buffer Git related data to be shown in statusline. However, it also includes two other big sets of features: <code>:Git</code> command for a more direct use of Git within current Neovim session and helper functions for a more interactive Git history exploration. It is <strong>not intended</strong> as ‘tpope/vim-fugitive’ or full featured Git client replacement.</p></li>
</ul>
<hr>
<p>Two plugins got visible breaking updates:</p>
<ul>
<li>‘mini.comment’ now treats whitespace more coherently (updated during the preparation for its essentially <a href="https://echasnovski.com/blog/2024-04-05-neovim-now-has-builtin-commenting.html">upstreaming to core</a>):
<ul>
<li>Blank lines are ignored when deciding whether to comment or uncomment. In practice it means that region with commented and blank lines will be uncommented rather than commented.</li>
<li>Whitespace in ‘commentstring’ is now treated more explicitly. With default config this is rarely noticeable, but might matter for people using <code>options.pad_comment_parts = false</code>.</li>
</ul></li>
<li>‘mini.statusline’ got several big updates:
<ul>
<li>The new ‘mini.diff’ and ‘mini.git’ modules now take precedence over ‘lewis6991/gitsigns.nvim’. Meaning the latter now is not required for ‘mini.statusline’ to show its full potential.</li>
<li><code>section_diagnostics()</code> now does not depend on whether there is an LSP server attached to the buffer (which is more aligned with section’s purpose).</li>
<li>There are two new sections added and immediately are now used in default active statusline content: <code>section_diff()</code> and <code>section_lsp()</code>. For users with default ‘mini.statusline’ config this mostly means that diff is shown with extra icon and there is an indicator for the number of attached LSP servers.</li>
</ul></li>
</ul>
<hr>
<p>Several plugins got small-ish but useful updates:</p>
<ul>
<li>‘mini.deps’ now highlights commit messages which indicate breaking change in a conventional commit style (which ‘mini.nvim’ itself now uses and I am very happy with it).</li>
<li>‘mini.map’ got <code>gen_integration.diff()</code> integration to highlight hunks from ‘mini.diff’.</li>
<li>‘mini.tabline’ got an option to format tab labels.</li>
<li>And more…</li>
</ul>
<hr>
<p>Thanks for reading and showing interest in ‘mini.nvim’ project!</p>
<p>Hope to see you soon in the next module release (there are some <strong>really</strong> nice things planned)!</p>



 ]]></description>
  <category>release</category>
  <category>reddit</category>
  <guid>https://nvim-mini.org/blog/2024-06-13-release-0130.html</guid>
  <pubDate>Thu, 13 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Announcing ‘mini.git’</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://nvim-mini.org/blog/2024-05-21-announce-mini-git.html</link>
  <description><![CDATA[ 





<p><em>Originally <a href="https://www.reddit.com/r/neovim/comments/1cxbegq/minigit_git_integration_with_tracking_gitrelated/">posted on Reddit</a></em></p>
<div class="quarto-video"><video id="video_shortcode_videojs_video1" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="2024-05-21-announce-mini-git/demo.mp4"></video></div>
<p>Hello, Neovim users!</p>
<p>Let’s together celebrate the release of <a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-git.md">mini.git</a> - new module of <a href="https://github.com/nvim-mini/mini.nvim">mini.nvim</a> for better Git integration. It can also be installed using <a href="https://github.com/nvim-mini/mini-git">separate GitHub repository</a>.</p>
<hr>
<p>First things first. This release marks ‘mini.nvim’ reaching two important milestones: - It is already module number 40. They grow up so fast. - The project recently reached 4000 GitHub stars. Thank you for your support and trust!</p>
<hr>
<p>Briefly about module itself. This is <strong>not</strong> intended as a one-to-one ‘tpope/vim-fugitive’ or full featured Git client replacement!</p>
<p>Git related functionality was <a href="https://github.com/nvim-mini/mini.nvim/issues/139">one of the oldest module requests</a> dating back to October 2022. After some thoughts, I have finally come up with a scope that I feel strikes an important balance between features and maintainability.</p>
<p>Its initial goal was to track Git related data in a way that can be used in statusline (can be seen used inside statusline in demo). This should pair nicely with what <a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-diff.md">‘mini.diff’</a> already does for diff hunks. The ‘mini.statusline’ module now uses ‘mini.git’ and ‘mini.diff’ by default for Git-diff-related sections (with fallback to ‘lewis6991/gitsigns.nvim’, so no major breaking).</p>
<p>After some thinking, I’ve also decided to add Fugitive-style <code>:Git</code> command and helpers for history navigation. Demo video showcases them both nicely.</p>
<hr>
<p>Features:</p>
<ul>
<li><p>Automated tracking of <a href="https://git-scm.com/">Git</a> related data: root path, status, HEAD, etc. Exposes buffer-local variables for convenient use in statusline.</p></li>
<li><p><code>:Git</code> command for executing any <code>git</code> call inside file’s repository root with deeper current instance integration (show output as notification/buffer, use to edit commit messages, etc.).</p></li>
<li><p>Helper functions to inspect Git history:</p>
<ul>
<li><code>MiniGit.show_range_history()</code> shows how certain line range evolved.</li>
<li><code>MiniGit.show_diff_source()</code> shows file state as it was at diff entry.</li>
<li><code>MiniGit.show_at_cursor()</code> shows Git related data depending on context.</li>
</ul></li>
</ul>
<p>What it doesn’t do:</p>
<ul>
<li>Replace fully featured Git client. Rule of thumb: if feature does not rely on a state of current Neovim (opened buffers, etc.), it is out of scope. For more functionality, use either <a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-diff.md">‘mini.diff’</a> or fully featured Git client.</li>
</ul>
<p>To read more information, see these tags in help file:</p>
<ul>
<li><p><a href="https://github.com/nvim-mini/mini.nvim/blob/e94945129780fa5b43447ecc0a4b0273892043e3/doc/mini-git.txt#L138"><code>*:Git*</code></a></p></li>
<li><p><a href="https://github.com/nvim-mini/mini.nvim/blob/e94945129780fa5b43447ecc0a4b0273892043e3/doc/mini-git.txt#L73"><code>*MiniGit-examples*</code></a></p></li>
<li><p><a href="https://github.com/nvim-mini/mini.nvim/blob/e94945129780fa5b43447ecc0a4b0273892043e3/doc/mini-git.txt#L357"><code>*MiniGit.enable()*</code></a></p></li>
<li><p><a href="https://github.com/nvim-mini/mini.nvim/blob/e94945129780fa5b43447ecc0a4b0273892043e3/doc/mini-git.txt#L396"><code>*MiniGit.get_buf_data()*</code></a></p></li>
</ul>
<hr>
<p>Please, check it out and tell me what you think! You can leave your suggestions either here in comments or in dedicated <a href="https://github.com/nvim-mini/mini.nvim/issues/898">beta-testing issue</a>.</p>
<p>Thanks!</p>



 ]]></description>
  <category>announce</category>
  <category>reddit</category>
  <guid>https://nvim-mini.org/blog/2024-05-21-announce-mini-git.html</guid>
  <pubDate>Tue, 21 May 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Announcing ‘mini.diff’</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://nvim-mini.org/blog/2024-03-28-announce-mini-diff.html</link>
  <description><![CDATA[ 





<p><em>Originally <a href="https://www.reddit.com/r/neovim/comments/1bq0cxy/minidiff_work_with_diff_hunks_interactively/">posted on Reddit</a></em></p>
<div class="quarto-video"><video id="video_shortcode_videojs_video1" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="2024-03-28-announce-mini-diff/demo.mp4"></video></div>
<p>Hello, Neovim users!</p>
<p>Please join me in cheering the release of <a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-diff.md">mini.diff</a> - new module of <a href="https://github.com/nvim-mini/mini.nvim">mini.nvim</a> for visualizing difference between buffer and reference text which is updated as you type. It can also be installed using <a href="https://github.com/nvim-mini/mini.diff">separate GitHub repository</a>.</p>
<hr>
<p>TL;DR: this is mostly similar to <a href="https://github.com/lewis6991/gitsigns.nvim">‘lewis6991/gitsigns.nvim’</a>, but with slight differences:</p>
<ul>
<li>Reference text source is configurable and not tied to Git (although it is used by default). This makes ‘mini.diff’ more flexible and future proof.</li>
<li>There is a special overlay view that <strong>persistently</strong> shows more diff details in text area. For me this became a much better way to review diff than <code>preview_hunk()</code> from ‘gitsigns.nvim’.</li>
<li>There are built-in reasonable mappings to work with hunks: apply/reset/textobject/navigate.</li>
</ul>
<hr>
<p>For a very long time I hesitated writing ‘gitsigns.nvim’ alternative to be included in ‘mini.nvim’. Mostly because it seemed to be almost impossible to squeeze all the diffing and Git functionality into a reasonably small file (which is a design goal for all ‘mini.nvim’ modules).</p>
<p>But after looking at how it is done in ‘gitsigns.nvim’, I realized that it utilizes built-in <a href="https://neovim.io/doc/user/lua.html#vim.diff"><code>vim.diff()</code></a> authored by Lewis Russell (a.k.a lewis6991) himself, and suddenly it became feasible. So I am really grateful for Lewis’s work in core, as without it this module would probably never happen.</p>
<hr>
<p>Features:</p>
<ul>
<li><p>Visualize difference between buffer text and its configurable reference interactively (updates as you type). This is done per line showing whether it is inside added, changed, or deleted part of difference (called hunk). Visualization can be with customizable colored signs or line numbers.</p></li>
<li><p>Special toggleable overlay view with more hunk details inside text area.</p></li>
<li><p>Completely configurable per buffer source of reference text used to keep it up to date and define interactions with it. By default uses buffer’s file content in Git index.</p></li>
<li><p>Configurable mappings to manage diff hunks:</p>
<ul>
<li>Apply and reset hunks inside region (selected visually or with a dot-repeatable operator).</li>
<li>“Hunk range under cursor” textobject to be used as operator target.</li>
<li>Navigate to first/previous/next/last hunk.</li>
</ul></li>
</ul>
<p>What it doesn’t do:</p>
<ul>
<li>Provide functionality to work directly with Git outside of visualizing and staging (applying) hunks with (default) Git source. In particular, unstaging hunks is not supported.</li>
</ul>
<p>For slightly more details, see <a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-diff.md#overview">overview in README</a>.</p>
<p>For even more information, see these tags in help file:</p>
<ul>
<li><p><a href="https://github.com/nvim-mini/mini.nvim/blob/0ec3216d3224ebd6828e5637fa9a10a00ba67113/doc/mini-diff.txt#L300"><code>*MiniDiff-source-specification*</code></a></p></li>
<li><p><a href="https://github.com/nvim-mini/mini.nvim/blob/0ec3216d3224ebd6828e5637fa9a10a00ba67113/doc/mini-diff.txt#L88"><code>*MiniDiff-hunk-specification*</code></a></p></li>
<li><p><a href="https://github.com/nvim-mini/mini.nvim/blob/0ec3216d3224ebd6828e5637fa9a10a00ba67113/doc/mini-diff.txt#L182"><code>*MiniDiff-diff-summary*</code></a></p></li>
</ul>
<hr>
<p>Please, check it out and tell me what you think! You can leave your suggestions either here in comments or in dedicated <a href="https://github.com/nvim-mini/mini.nvim/issues/773">beta-testing issue</a>.</p>
<p>Thanks!</p>



 ]]></description>
  <category>announce</category>
  <category>reddit</category>
  <guid>https://nvim-mini.org/blog/2024-03-28-announce-mini-diff.html</guid>
  <pubDate>Thu, 28 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Release 0.12.0</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://nvim-mini.org/blog/2024-02-29-release-0120.html</link>
  <description><![CDATA[ 





<p><em>Originally <a href="https://www.reddit.com/r/neovim/comments/1b342yx/mininvim_release_0120_three_new_modules_a_few/">posted on Reddit</a></em></p>
<p>Hello, Neovim users!</p>
<p>Let’s celebrate the leap year day by making a long overdue 0.12.0 release of <a href="https://github.com/nvim-mini/mini.nvim">mini.nvim</a>. It includes three major plugins coming out of beta-testing and quite a few small updates to other modules.</p>
<p>Here is a <a href="https://github.com/nvim-mini/mini.nvim/releases/tag/v0.12.0">full release description</a> if you are curious.</p>
<hr>
<p>Three new modules coming out of beta-testing:</p>
<ul>
<li><p><a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-visits.md">mini.visits</a> - module to track and reuse file system visits. This is a ‘mini.nvim’ version of ‘nvim-telescope/telescope-frecency.nvim’ (persistently track file visits and select from them) partially combined with ‘ThePrimeagen/harpoon’ (persistently add/remove labels to paths and select based on them).</p></li>
<li><p><a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-notify.md">mini.notify</a> - module to show notifications. It provides custom ‘vim.notify’ maker so that users can have pretty and less intrusive plugin notifications. Also by default it sets up notifications for LSP progress updates (feature I didn’t know I needed until I tried it).</p></li>
<li><p><a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-deps.md">mini.deps</a> - plugin manager module. Although ‘mini.nvim’ already includes most of the necessary editor functionality, there are other great plugins out there. ‘mini.deps’ helps installing/updating/cleaning/snapshotting other plugins with minimal yet sufficient user experience (in my opinion it ended up somewhere near ‘junegunn/vim-plug’ in that regard).</p></li>
</ul>
<hr>
<p>Already present modules got their fair share of updates:</p>
<ul>
<li>‘mini.comment’ now calls hooks with data about commenting action.</li>
<li>‘mini.hues’ now implements support for the new tree-sitter captures introduced in ‘nvim-treesitter’ and Neovim&gt;=0.10.</li>
<li>‘mini.statusline’ now has <code>search_count</code> section in default content.</li>
<li>And more…</li>
</ul>
<hr>
<p>Thanks for reading! Hope to see you soon in the next module release!</p>



 ]]></description>
  <category>release</category>
  <category>reddit</category>
  <guid>https://nvim-mini.org/blog/2024-02-29-release-0120.html</guid>
  <pubDate>Thu, 29 Feb 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Announcing ‘mini.deps’</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://nvim-mini.org/blog/2024-02-11-announce-mini-deps.html</link>
  <description><![CDATA[ 





<p><em>Originally <a href="https://www.reddit.com/r/neovim/comments/1aodopi/minideps_a_plugin_manager_with_minimal_yet/">posted on Reddit</a></em></p>
<div class="quarto-video"><video id="video_shortcode_videojs_video1" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="2024-02-11-announce-mini-deps/demo.mp4"></video></div>
<p>Hello, Neovim users!</p>
<p>I am happy to share with you a release of <a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-deps.md">mini.deps</a> - new module of <a href="https://github.com/nvim-mini/mini.nvim">mini.nvim</a> which acts as a plugin manager to install and manage other plugins. It can also be installed using <a href="https://github.com/nvim-mini/mini.deps">separate GitHub repository</a>.</p>
<hr>
<p>This was one of the toughest modules to write as of yet. Although overall goal of managing plugins seems more or less straightforward, actually designing the balance between simplicity and usability has proved to be not as trivial. I ended up redesigning the overall approach three times. Combined with slow iteration process of simulating plugin updates, not trivial testing, and some real life issues, this took waaaay longer than I would’ve liked. Despite all this, it is now fully designed, implemented, tested, and documented.</p>
<p>Overall, it uses Git and built-in packages to install, update, clean, and snapshot plugins. It is far less feature-rich than <a href="https://github.com/folke/lazy.nvim">‘folke/lazy.nvim’</a> and slightly more user-friendly than <a href="https://github.com/savq/paq-nvim">‘savq/paq-nvim’</a>. In my opinion it ended up somewhere near <a href="https://github.com/junegunn/vim-plug">‘junegunn/vim-plug’</a> when talking about user experience.</p>
<hr>
<p>Features:</p>
<ul>
<li>Manage plugins utilizing Git and built-in packages with these actions:
<ul>
<li>Add plugin to current session, download if absent.</li>
<li>Update with/without confirm, with/without parallel download of new data.</li>
<li>Delete unused plugins with/without confirm.</li>
<li>Get / set / save / load snapshot.</li>
</ul></li>
<li>Minimal yet flexible plugin specification:
<ul>
<li>Plugin source.</li>
<li>Name of target plugin directory.</li>
<li>Checkout target: branch, commit, tag, etc.</li>
<li>Monitor branch to track updates without checking out.</li>
<li>Dependencies to be set up prior to the target plugin.</li>
<li>Hooks to call before/after plugin is created/changed.</li>
</ul></li>
<li>Helpers implementing two-stage startup: <code>now()</code> and <code>later()</code>.</li>
</ul>
<p>For slightly more details, see <a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-deps.md#overview">overview in README</a>.</p>
<p>For even more information, see these tags in help file: - <a href="https://github.com/nvim-mini/mini.nvim/blob/490dd84b69008f75bcd5e593b7a92b06832d5b16/doc/mini-deps.txt#L240"><code>*MiniDeps-plugin-specification*</code></a> - <a href="https://github.com/nvim-mini/mini.nvim/blob/490dd84b69008f75bcd5e593b7a92b06832d5b16/doc/mini-deps.txt#L286"><code>*MiniDeps-commands*</code></a></p>
<hr>
<p>Please, check it out and tell me what you think! You can leave your suggestions either here in comments or in <a href="https://github.com/nvim-mini/mini.nvim/issues/689">dedicated beta-testing issue</a>.</p>
<p>I do want to point out that it is a good idea to first try this without affecting your main config. Here is one example with <a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-deps.md#overview">two quick steps of how to do this</a>.</p>
<p>Thanks!</p>



 ]]></description>
  <category>announce</category>
  <category>reddit</category>
  <guid>https://nvim-mini.org/blog/2024-02-11-announce-mini-deps.html</guid>
  <pubDate>Sun, 11 Feb 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Announcing ‘mini.notify’</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://nvim-mini.org/blog/2024-01-04-announce-mini-notify.html</link>
  <description><![CDATA[ 





<p><em>Originally <a href="https://www.reddit.com/r/neovim/comments/18ye17d/mininotify_show_notifications_a_vimnotify_maker/">posted on Reddit</a></em></p>
<div class="quarto-video"><video id="video_shortcode_videojs_video1" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="2024-01-04-announce-mini-notify/demo.mp4"></video></div>
<p>Hello, Neovim users!</p>
<p>Please join me in welcoming 2024 with announce of <a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-notify.md">mini.notify</a> - new module of <a href="https://github.com/nvim-mini/mini.nvim">mini.nvim</a> with functionality to show one or more highlighted notifications in a floating window. It can also be installed using <a href="https://github.com/nvim-mini/mini.notify">separate GitHub repository</a>.</p>
<hr>
<p>I personally didn’t use fancy notifications before ‘mini.notify’ but it was on my TODO list. Recently it occurred to me that a demo of at least one upcoming module will look more interesting if several notifications can be shown at once. Thus I decided to move this new functionality up in list and here we are.</p>
<hr>
<p>Features:</p>
<ul>
<li><p>Show one or more highlighted notifications in a single floating window.</p></li>
<li><p>Manage notifications (add, update, remove, clear).</p></li>
<li><p><code>vim.notify()</code> wrapper generator (see <a href="https://github.com/nvim-mini/mini.nvim/blob/a118a964c94543c06d8b1f2f7542535dd2e19d36/doc/mini-notify.txt#L204">MiniNotify.make_notify()</a>).</p></li>
<li><p>Automated show of LSP progress report.</p></li>
<li><p>Track history which can be accessed with <code>MiniNotify.get_all()</code> and shown with <code>MiniNotify.show_history()</code>.</p></li>
</ul>
<p>For full documentation see <a href="https://github.com/nvim-mini/mini.nvim/blob/main/doc/mini-notify.txt">help file</a>.</p>
<hr>
<p>Please, check it out and tell me what you think! You can leave your suggestions either here in comments or in <a href="https://github.com/nvim-mini/mini.nvim/issues/640">dedicated beta-testing issue</a>.</p>
<p>Thanks!</p>



 ]]></description>
  <category>announce</category>
  <category>reddit</category>
  <guid>https://nvim-mini.org/blog/2024-01-04-announce-mini-notify.html</guid>
  <pubDate>Thu, 04 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Announcing ‘mini.visits’</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://nvim-mini.org/blog/2023-11-28-announce-mini-visits.html</link>
  <description><![CDATA[ 





<p><em>Originally <a href="https://www.reddit.com/r/neovim/comments/185yi7q/minivisits_track_and_reuse_file_system_visits/">posted on Reddit</a></em></p>
<div class="quarto-video"><video id="video_shortcode_videojs_video1" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="2023-11-28-announce-mini-visits/demo.mp4"></video></div>
<p>Hello, Neovim users!</p>
<p>It is my pleasure to bring you <a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-visits.md">mini.visits</a> - new module of <a href="https://github.com/nvim-mini/mini.nvim">mini.nvim</a> which can track and reuse file system visits. It can also be installed using <a href="https://github.com/nvim-mini/mini.visits">separate GitHub repository</a>.</p>
<p><strong>Note</strong>: This demo uses custom <code>vim.ui.select()</code> from <a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-pick.md">mini.pick</a>.</p>
<hr>
<p>TL;DR: This is a ‘mini.nvim’ version of a combination of <a href="https://github.com/nvim-telescope/telescope-frecency.nvim">nvim-telescope/telescope-frecency.nvim</a> (persistently track file visits and select from them) and <a href="https://github.com/ThePrimeagen/harpoon">ThePrimeagen/harpoon</a> (persistently add/remove labels to paths and select based on them).</p>
<p><strong>But</strong> there is no feature parity with any of them (and is not planned), as the overall design and assumed workflows are slightly different. Here is a <a href="https://github.com/nvim-mini/mini.nvim/blob/964fab7fecd14f66a69a96162f8aa816480690fd/doc/mini-visits.txt#L64">link to a more detailed comparisons</a>.</p>
<hr>
<p>Features:</p>
<ul>
<li><p>Persistently track file system visits (both files and directories) per project directory. Store visit index is human readable and editable.</p></li>
<li><p>Visit index is normalized on every write to contain relevant information. Exact details can be customized.</p></li>
<li><p>Built-in ability to persistently use label paths for later use.</p></li>
<li><p>Exported functions to reuse visit data:</p>
<ul>
<li><p>List visited paths/labels with custom filter and sort (uses “robust frecency” by default). Can be used as source for pickers.</p></li>
<li><p>Select visited paths/labels using <code>vim.ui.select()</code>.</p></li>
<li><p>Iterate through visit paths in target direction (“forward”, “backward”, “first”, “last”).</p></li>
</ul></li>
<li><p>Exported functions to manually update visit index allowing persistent track of any user information.</p></li>
</ul>
<p>For more information, see these tags in help file:</p>
<ul>
<li><a href="https://github.com/nvim-mini/mini.nvim/blob/964fab7fecd14f66a69a96162f8aa816480690fd/doc/mini-visits.txt#L105"><code>*MiniVisits-overview*</code></a></li>
<li><a href="https://github.com/nvim-mini/mini.nvim/blob/964fab7fecd14f66a69a96162f8aa816480690fd/doc/mini-visits.txt#L162"><code>*MiniVisits-index-specification*</code></a></li>
<li><a href="https://github.com/nvim-mini/mini.nvim/blob/964fab7fecd14f66a69a96162f8aa816480690fd/doc/mini-visits.txt#L225"><code>*MiniVisits-examples*</code></a></li>
</ul>
<p>For full documentation see <a href="https://github.com/nvim-mini/mini.nvim/blob/main/doc/mini-visits.txt">help file</a>.</p>
<hr>
<p>There are also two new ‘mini.pick’ pickers for <a href="../blog/2023-11-02-announce-mini-extra.html">mini.extra</a>: <a href="https://github.com/nvim-mini/mini.nvim/blob/964fab7fecd14f66a69a96162f8aa816480690fd/doc/mini-extra.txt#L731"><code>visit_paths()</code></a> and <a href="https://github.com/nvim-mini/mini.nvim/blob/964fab7fecd14f66a69a96162f8aa816480690fd/doc/mini-extra.txt#L766"><code>visit_labels()</code></a>. These are essentially a slightly polished alternatives (with file icons, preview, etc.) to built-in pickers which use <code>vim.ui.select()</code>.</p>
<hr>
<p>Please, check it out and tell me what you think! You can leave your suggestions either here in comments or in <a href="https://github.com/nvim-mini/mini.nvim/issues/591">dedicated beta-testing issue</a>.</p>
<p>Thanks!</p>



 ]]></description>
  <category>announce</category>
  <category>reddit</category>
  <guid>https://nvim-mini.org/blog/2023-11-28-announce-mini-visits.html</guid>
  <pubDate>Tue, 28 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Release 0.11.0</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://nvim-mini.org/blog/2023-11-17-release-0110.html</link>
  <description><![CDATA[ 





<p><em>Originally <a href="https://www.reddit.com/r/neovim/comments/17xhmgz/mininvim_release_0110_new_fuzzy_picker_in_town/">posted on Reddit</a></em></p>
<p>Hello, Neovim users!</p>
<p>Today is the day to update <a href="https://github.com/nvim-mini/mini.nvim">mini.nvim</a> to version 0.11.0. It includes two big plugins coming out of beta-testing and many small updates to other modules as a result of backlog cleanup.</p>
<p>Here is a <a href="https://github.com/nvim-mini/mini.nvim/releases/tag/v0.11.0">full release description</a> if you are curious.</p>
<hr>
<p>Two new modules are about making a performant picker with minimal UI and a lot of preconfigured pickers:</p>
<ul>
<li><p><a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-pick.md">mini.pick</a> - pick anything. A general picker as alternative to Telescope and Fzf-Lua. Both of these plugins are great, but I wanted to have a slightly different UI and UX: a one window design with on demand preview. I am daily driving it for about two and a half months now and don’t miss anything. Here is a link to <a href="../blog/2023-10-13-announce-mini-pick.html">the announcement</a>.</p></li>
<li><p><a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-extra.md">mini.extra</a> - extra functionality for ‘mini.nvim’ modules. Its main goal is mostly to contain 20+ preconfigured pickers for ‘mini.pick’ (like for built-in diagnostic, LSP, Neovim histories, etc.) and several textobject specifications for ‘mini.ai’ (line, buffer, indent, etc.), while still allowing more diverse functionality in the future. Here is a link to <a href="../blog/2023-11-02-announce-mini-extra.html">the announcement</a>.</p></li>
</ul>
<hr>
<p>‘mini.hipatterns’ got a substantial update:</p>
<ul>
<li>Highlighter can now have an array of patterns to highlight, not just a single one.</li>
<li>Highlighter can now define more general <code>extmark_opts</code>. This allows highlighting not only with single highlight group over the matched range, but adding virtual text (like covering some sensitive words with <code>x</code>), highlighting whole line of the match, add sign, etc.</li>
<li>Built-in hex color highlighter now can highlight using inline extmarks (so that colored symbols appear to the left of the color and not over it). But only on Neovim&gt;=0.10.</li>
<li>There is a new <code>get_matches()</code> function to get current matches with their positions. This powers the <code>pickers.hipatterns</code> picker form ‘mini.extra’.</li>
</ul>
<hr>
<p>There are also small-ish feature updates for ‘mini.bufremove’, ‘mini.clue’, ‘mini.comment’, ‘mini.completion’, ‘mini.files’, ‘mini.map’, ‘mini.misc’, ‘mini.starter’, and ‘mini.test’.</p>
<hr>
<p>On another note, ‘mini.nvim’ just passed the 3000 GitHub stars mark. Thank you all for continuous support. I love you 3000!</p>
<p>Thanks for reading! Hope to see you in the next module release!</p>



 ]]></description>
  <category>release</category>
  <category>reddit</category>
  <guid>https://nvim-mini.org/blog/2023-11-17-release-0110.html</guid>
  <pubDate>Fri, 17 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Announcing ‘mini.extra’</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://nvim-mini.org/blog/2023-11-02-announce-mini-extra.html</link>
  <description><![CDATA[ 





<p><em>Originally <a href="https://www.reddit.com/r/neovim/comments/17m65jn/miniextra_extra_mininvim_functionality_many/">posted on Reddit</a></em></p>
<div class="quarto-video"><video id="video_shortcode_videojs_video1" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="2023-11-02-announce-mini-extra/demo.mp4"></video></div>
<p>Hello, Neovim users!</p>
<p>Today I would like to tell you about the release of <a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-extra.md">mini.extra</a> - new module of <a href="https://github.com/nvim-mini/mini.nvim">mini.nvim</a>. It can also be installed using <a href="https://github.com/nvim-mini/mini.extra">separate GitHub repository</a>.</p>
<p>Here is a <a href="https://github.com/nvim-mini/mini.nvim/blob/main/readmes/mini-extra.md#demo">link to the video demo</a>.</p>
<hr>
<p>This is basically meant as a collection of functionality which is not essential enough for other ‘mini.nvim’ modules to include directly.</p>
<p>Right now it mostly consists from many (20, to be exact) pre-built pickers for <a href="../blog/2023-10-13-announce-mini-pick.html">mini.pick</a> plus some ‘mini.ai’ textobjects and ‘mini.hipatterns’ highlighters. But there might be more functionality and for other modules in the future.</p>
<hr>
<p>Features:</p>
<ul>
<li><p>Various pickers for ‘mini.pick’:</p>
<ul>
<li>Built-in diagnostic (<code>*MiniExtra.pickers.diagnostic()*</code>).</li>
<li>File explorer (<code>*MiniExtra.pickers.explorer()*</code>).</li>
<li>Git branches/commits/files/hunks (<code>*MiniExtra.pickers.git_hunks()*</code>, etc.).</li>
<li>Command/search/input history (<code>*MiniExtra.pickers.history()*</code>).</li>
<li>LSP references/symbols/etc. (<code>*MiniExtra.pickers.lsp()*</code>).</li>
<li>Treesitter nodes (<code>*MiniExtra.pickers.treesitter()*</code>).</li>
<li><strong>And much more</strong>.</li>
</ul>
<p>See <a href="https://github.com/nvim-mini/mini.nvim/blob/eaf0e040362fa0c20db1a7f0cccda9099b6b0362/doc/mini-extra.txt#L209"><code>*MiniExtra.pickers*</code> help tag</a> for more.</p></li>
<li><p>Various textobject specifications for ‘mini.ai’. See <a href="https://github.com/nvim-mini/mini.nvim/blob/eaf0e040362fa0c20db1a7f0cccda9099b6b0362/doc/mini-extra.txt#L73"><code>*MiniExtra.gen_ai_spec*</code> help tag</a>.</p></li>
<li><p>Various highlighters for ‘mini.hipatterns’. See <a href="https://github.com/nvim-mini/mini.nvim/blob/eaf0e040362fa0c20db1a7f0cccda9099b6b0362/doc/mini-extra.txt#L175"><code>*MiniExtra.gen_highlighter*</code> help tag</a>.</p></li>
</ul>
<p>Notes: - This module requires only those ‘mini.nvim’ modules which are needed for a particular functionality: ‘mini.pick’ for pickers, etc.</p>
<p>For full documentation see <a href="https://github.com/nvim-mini/mini.nvim/blob/main/doc/mini-extra.txt">help file</a>.</p>
<hr>
<p>Please, check it out and tell me what you think! You can leave your suggestions either here in comments or in <a href="https://github.com/nvim-mini/mini.nvim/issues/550">dedicated beta-testing issue</a>.</p>
<p>Thanks!</p>



 ]]></description>
  <category>announce</category>
  <category>reddit</category>
  <guid>https://nvim-mini.org/blog/2023-11-02-announce-mini-extra.html</guid>
  <pubDate>Thu, 02 Nov 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
