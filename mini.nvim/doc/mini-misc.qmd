---
title: "mini.misc documentation"
---

_Generated from the `main` branch of 'mini.nvim'_

<a name="mini.misc" href="mini-misc.qmd#mini.misc"><b>mini.misc</b></a> Miscellaneous functions

MIT License Copyright (c) 2021 Evgeni Chasnovski

---

### Module {#module .help-syntax-right-anchor}

Features the following functions:

- [MiniMisc.bench\_time()](mini-misc.qmd#minimisc.bench_time) to benchmark function execution time.
  Useful in combination with `stat_summary()`.


- [MiniMisc.put()](mini-misc.qmd#minimisc.put) and [MiniMisc.put\_text()](mini-misc.qmd#minimisc.put_text) to pretty print its arguments
  into command line and current buffer respectively.


- [MiniMisc.resize\_window()](mini-misc.qmd#minimisc.resize_window) to resize current window to its editable width.


- [MiniMisc.setup\_auto\_root()](mini-misc.qmd#minimisc.setup_auto_root) to set up automated change of current directory.


- [MiniMisc.setup\_termbg\_sync()](mini-misc.qmd#minimisc.setup_termbg_sync) to set up terminal background synchronization
  (removes possible "frame" around current Neovim instance).


- [MiniMisc.setup\_restore\_cursor()](mini-misc.qmd#minimisc.setup_restore_cursor) to set up automated restoration of
  cursor position on file reopen.


- [MiniMisc.stat\_summary()](mini-misc.qmd#minimisc.stat_summary) to compute summary statistics of numerical array.
  Useful in combination with `bench_time()`.


- [MiniMisc.tbl\_head()](mini-misc.qmd#minimisc.tbl_head) and [MiniMisc.tbl\_tail()](mini-misc.qmd#minimisc.tbl_tail) to return "first" and "last"
  elements of table.


- [MiniMisc.zoom()](mini-misc.qmd#minimisc.zoom) to zoom in and out of a buffer, making it full screen
  in a floating window.


- And more.

#### Setup {#module-setup}


This module doesn't need setup, but it can be done to improve usability.
Setup with `require('mini.misc').setup({})` (replace `{}` with your
`config` table). It will create global Lua table `MiniMisc` which you can
use for scripting or manually (with `:lua MiniMisc.*`).

See [MiniMisc.config](mini-misc.qmd#minimisc.config) for `config` structure and default values.

This module doesn't have runtime options, so using `vim.b.minimisc_config`
will have no effect here.

---

### setup() {#minimisc.setup .help-syntax-right-anchor}

<p align="center">`MiniMisc.setup`(<span class="help-syntax-special">{config}</span>)</p>
Module setup

#### Parameters {#minimisc.setup-parameters}



<span class="help-syntax-special">{config}</span> `(table|nil)` Module config table. See [MiniMisc.config](mini-misc.qmd#minimisc.config).

#### Usage {#minimisc.setup-usage}



  ```lua
  require('mini.misc').setup() -- use default config
  -- OR
  require('mini.misc').setup({}) -- replace {} with your config table
  ```

---

### config {#minimisc.config .help-syntax-right-anchor}

<p align="center">`MiniMisc.config`</p>
#### Defaults {#minimisc.config-defaults}



  ```lua
  MiniMisc.config = {
    -- Array of fields to make global (to be used as independent variables)
    make_global = { 'put', 'put_text' },
  }
  ```

---

### bench_time() {#minimisc.bench_time .help-syntax-right-anchor}

<p align="center">`MiniMisc.bench_time`(<span class="help-syntax-special">{f}</span>, <span class="help-syntax-special">{n}</span>, <span class="help-syntax-special">{...}</span>)</p>
Execute `f` several times and time how long it took

#### Parameters {#minimisc.bench_time-parameters}



<span class="help-syntax-special">{f}</span> `(function)` Function which execution to benchmark.

<span class="help-syntax-special">{n}</span> `(number|nil)` Number of times to execute `f(...)`. Default: 1.

<span class="help-syntax-special">{...}</span> `(any)` Arguments when calling `f`.

#### Return {#minimisc.bench_time-return}


`(...)` Table with durations (in seconds; up to nanoseconds) and
  output of (last) function execution.

---

### get_gutter_width() {#minimisc.get_gutter_width .help-syntax-right-anchor}

<p align="center">`MiniMisc.get_gutter_width`(<span class="help-syntax-special">{win_id}</span>)</p>
Compute width of gutter (info column on the left of the window)

#### Parameters {#minimisc.get_gutter_width-parameters}



<span class="help-syntax-special">{win_id}</span> `(number|nil)` Window identifier (see [win\_getid()](https://neovim.io/doc/user/helptag.html?tag=win_getid\(\))) for which gutter
  width is computed. Default: 0 for current.

---

### put() {#minimisc.put .help-syntax-right-anchor}

<p align="center">`MiniMisc.put`(<span class="help-syntax-special">{...}</span>)</p>
Print Lua objects in command line

#### Parameters {#minimisc.put-parameters}



<span class="help-syntax-special">{...}</span> `(any)` Any number of objects to be printed each on separate line.

---

### put_text() {#minimisc.put_text .help-syntax-right-anchor}

<p align="center">`MiniMisc.put_text`(<span class="help-syntax-special">{...}</span>)</p>
Print Lua objects in current buffer

#### Parameters {#minimisc.put_text-parameters}



<span class="help-syntax-special">{...}</span> `(any)` Any number of objects to be printed each on separate line.

---

### resize_window() {#minimisc.resize_window .help-syntax-right-anchor}

<p align="center">`MiniMisc.resize_window`(<span class="help-syntax-special">{win_id}</span>, <span class="help-syntax-special">{text_width}</span>)</p>
Resize window to have exact number of editable columns

#### Parameters {#minimisc.resize_window-parameters}



<span class="help-syntax-special">{win_id}</span> `(number|nil)` Window identifier (see [win\_getid()](https://neovim.io/doc/user/helptag.html?tag=win_getid\(\))) to be resized.
  Default: 0 for current.

<span class="help-syntax-special">{text_width}</span> `(number|nil)` Number of editable columns resized window will
  display. Default: first element of 'colorcolumn' or otherwise 'textwidth'
  (using screen width as its default but not more than 79).

---

### setup_auto_root() {#minimisc.setup_auto_root .help-syntax-right-anchor}

<p align="center">`MiniMisc.setup_auto_root`(<span class="help-syntax-special">{names}</span>, <span class="help-syntax-special">{fallback}</span>)</p>
Set up automated change of current directory

What it does:

- Creates autocommand which on every [BufEnter](https://neovim.io/doc/user/helptag.html?tag=BufEnter) event with [MiniMisc.find\_root()](mini-misc.qmd#minimisc.find_root)
  finds root directory for current buffer file and sets [current-directory](https://neovim.io/doc/user/helptag.html?tag=current-directory)
  to it (using [chdir()](https://neovim.io/doc/user/helptag.html?tag=chdir\(\))).

- Resets ['autochdir'](https://neovim.io/doc/user/helptag.html?tag='autochdir') to `false`.

#### Parameters {#minimisc.setup_auto_root-parameters}



<span class="help-syntax-special">{names}</span> `(table|function|nil)` Forwarded to [MiniMisc.find\_root()](mini-misc.qmd#minimisc.find_root).

<span class="help-syntax-special">{fallback}</span> `(function|nil)` Forwarded to [MiniMisc.find\_root()](mini-misc.qmd#minimisc.find_root).

#### Usage {#minimisc.setup_auto_root-usage}



  ```lua
  require('mini.misc').setup()
  MiniMisc.setup_auto_root()
  ```

---

### find_root() {#minimisc.find_root .help-syntax-right-anchor}

<p align="center">`MiniMisc.find_root`(<span class="help-syntax-special">{buf_id}</span>, <span class="help-syntax-special">{names}</span>, <span class="help-syntax-special">{fallback}</span>)</p>
Find root directory

Based on a buffer name (full path to file opened in a buffer) find a root
directory. If buffer is not associated with file, returns `nil`.

Root directory is a directory containing at least one of pre-defined files.
It is searched using [vim.fs.find()](https://neovim.io/doc/user/helptag.html?tag=vim.fs.find\(\)) with `upward = true` starting from
directory of current buffer file until first occurrence of root file(s).

Notes:

- Uses directory path caching to speed up computations. This means that no
  changes in root directory will be detected after directory path was already
  used in this function. Reload Neovim to account for that.

#### Parameters {#minimisc.find_root-parameters}



<span class="help-syntax-special">{buf_id}</span> `(number|nil)` Buffer identifier (see [bufnr()](https://neovim.io/doc/user/helptag.html?tag=bufnr\(\))) to use.
  Default: 0 for current.

<span class="help-syntax-special">{names}</span> `(table|function|nil)` Array of file names or a callable used to
  identify a root directory. Forwarded to [vim.fs.find()](https://neovim.io/doc/user/helptag.html?tag=vim.fs.find\(\)).
  Default: `{ '.git', 'Makefile' }`.

<span class="help-syntax-special">{fallback}</span> `(function|nil)` Callable fallback to use if no root is found
  with [vim.fs.find()](https://neovim.io/doc/user/helptag.html?tag=vim.fs.find\(\)). Will be called with a buffer path and should return
  a valid directory path.

---

### setup_termbg_sync() {#minimisc.setup_termbg_sync .help-syntax-right-anchor}

<p align="center">`MiniMisc.setup_termbg_sync`()</p>
Set up terminal background synchronization

What it does:

- Checks if terminal emulator supports OSC 11 control sequence through
  appropriate `stdout`. Stops if not.

- Creates autocommands for [ColorScheme](https://neovim.io/doc/user/helptag.html?tag=ColorScheme) and [VimResume](https://neovim.io/doc/user/helptag.html?tag=VimResume) events, which
  change terminal background to have same color as [guibg](https://neovim.io/doc/user/helptag.html?tag=guibg) of [hl-Normal](https://neovim.io/doc/user/helptag.html?tag=hl-Normal).

- Creates autocommands for [VimLeavePre](https://neovim.io/doc/user/helptag.html?tag=VimLeavePre) and [VimSuspend](https://neovim.io/doc/user/helptag.html?tag=VimSuspend) events which set
  terminal background back to the color at the time this function was
  called first time in current session.

- Synchronizes background immediately to allow not depend on loading order.

Primary use case is to remove possible "frame" around current Neovim instance
which appears if Neovim's [hl-Normal](https://neovim.io/doc/user/helptag.html?tag=hl-Normal) background color differs from what is
used by terminal emulator itself.

Works only on Neovim>=0.10.

---

### setup_restore_cursor() {#minimisc.setup_restore_cursor .help-syntax-right-anchor}

<p align="center">`MiniMisc.setup_restore_cursor`(<span class="help-syntax-special">{opts}</span>)</p>
Restore cursor position on file open

When reopening a file this will make sure the cursor is placed back to the
position where you left before. This implements [restore-cursor](https://neovim.io/doc/user/helptag.html?tag=restore-cursor) in a nicer way.
File should have a recognized file type (see 'filetype') and be opened in
a normal buffer (see 'buftype').

Note: it relies on file mark data stored in 'shadafile' (see [shada-f](https://neovim.io/doc/user/helptag.html?tag=shada-f)).
Be sure to enable it.

#### Parameters {#minimisc.setup_restore_cursor-parameters}



<span class="help-syntax-special">{opts}</span> `(table|nil)` Options. Possible fields:

  - <span class="help-syntax-keys">\<center\></span> - (boolean) Center the window after we restored the cursor.
    Default: `true`.

  - <span class="help-syntax-keys">\<ignore_filetype\></span> - Array with file types to be ignored (see 'filetype').
    Default: `{ "gitcommit", "gitrebase" }`.

#### Usage {#minimisc.setup_restore_cursor-usage}



  ```lua
  require('mini.misc').setup_restore_cursor()
  ```

---

### stat_summary() {#minimisc.stat_summary .help-syntax-right-anchor}

<p align="center">`MiniMisc.stat_summary`(<span class="help-syntax-special">{t}</span>)</p>
Compute summary statistics of numerical array

This might be useful to compute summary of time benchmarking with
[MiniMisc.bench\_time()](mini-misc.qmd#minimisc.bench_time).

#### Parameters {#minimisc.stat_summary-parameters}



<span class="help-syntax-special">{t}</span> `(table)` Array (table suitable for `ipairs`) of numbers.

#### Return {#minimisc.stat_summary-return}


`(table)` Table with summary values under following keys (may be
  extended in the future): <span class="help-syntax-keys">\<maximum\></span>, <span class="help-syntax-keys">\<mean\></span>, <span class="help-syntax-keys">\<median\></span>, <span class="help-syntax-keys">\<minimum\></span>, <span class="help-syntax-keys">\<n\></span>
  (number of elements), <span class="help-syntax-keys">\<sd\></span> (sample standard deviation).

---

### tbl_head() {#minimisc.tbl_head .help-syntax-right-anchor}

<p align="center">`MiniMisc.tbl_head`(<span class="help-syntax-special">{t}</span>, <span class="help-syntax-special">{n}</span>)</p>
Return "first" elements of table as decided by `pairs`

Note: order of elements might vary.

#### Parameters {#minimisc.tbl_head-parameters}



<span class="help-syntax-special">{t}</span> `(table)` Input table.

<span class="help-syntax-special">{n}</span> `(number|nil)` Maximum number of first elements. Default: 5.

#### Return {#minimisc.tbl_head-return}


`(table)` Table with at most `n` first elements of `t` (with same keys).

---

### tbl_tail() {#minimisc.tbl_tail .help-syntax-right-anchor}

<p align="center">`MiniMisc.tbl_tail`(<span class="help-syntax-special">{t}</span>, <span class="help-syntax-special">{n}</span>)</p>
Return "last" elements of table as decided by `pairs`

This function makes two passes through elements of `t`:

- First to count number of elements.

- Second to construct result.

Note: order of elements might vary.

#### Parameters {#minimisc.tbl_tail-parameters}



<span class="help-syntax-special">{t}</span> `(table)` Input table.

<span class="help-syntax-special">{n}</span> `(number|nil)` Maximum number of last elements. Default: 5.

#### Return {#minimisc.tbl_tail-return}


`(table)` Table with at most `n` last elements of `t` (with same keys).

---

### use_nested_comments() {#minimisc.use_nested_comments .help-syntax-right-anchor}

<p align="center">`MiniMisc.use_nested_comments`(<span class="help-syntax-special">{buf_id}</span>)</p>
Add possibility of nested comment leader

This works by parsing 'commentstring' buffer option, extracting
non-whitespace comment leader (symbols on the left of commented line), and
locally modifying 'comments' option (by prepending `n:<leader>`). Does
nothing if 'commentstring' is empty or has comment symbols both in front
and back (like "/%s/").

Nested comment leader added with this function is useful for formatting
nested comments. For example, have in Lua "first-level" comments with '--'
and "second-level" comments with '----'. With nested comment leader second
type can be formatted with `gq` in the same way as first one.

Recommended usage is with [autocmd](https://neovim.io/doc/user/helptag.html?tag=autocmd):

  ```lua
  local use_nested_comments = function() MiniMisc.use_nested_comments() end
  vim.api.nvim_create_autocmd('BufEnter', { callback = use_nested_comments })
  ```

Note: for most filetypes 'commentstring' option is added only when buffer
with this filetype is entered, so using non-current `buf_id` can not lead
to desired effect.

#### Parameters {#minimisc.use_nested_comments-parameters}



<span class="help-syntax-special">{buf_id}</span> `(number|nil)` Buffer identifier (see [bufnr()](https://neovim.io/doc/user/helptag.html?tag=bufnr\(\))) in which function
  will operate. Default: 0 for current.

---

### zoom() {#minimisc.zoom .help-syntax-right-anchor}

<p align="center">`MiniMisc.zoom`(<span class="help-syntax-special">{buf_id}</span>, <span class="help-syntax-special">{config}</span>)</p>
Zoom in and out of a buffer, making it full screen in a floating window

This function is useful when working with multiple windows but temporarily
needing to zoom into one to see more of the code from that buffer. Call it
again (without arguments) to zoom out.

#### Parameters {#minimisc.zoom-parameters}



<span class="help-syntax-special">{buf_id}</span> `(number|nil)` Buffer identifier (see [bufnr()](https://neovim.io/doc/user/helptag.html?tag=bufnr\(\))) to be zoomed.
  Default: 0 for current.

<span class="help-syntax-special">{config}</span> `(table|nil)` Optional config for window (as for [nvim\_open\_win()](https://neovim.io/doc/user/helptag.html?tag=nvim_open_win\(\))).

#### Return {#minimisc.zoom-return}


`(boolean)` Whether current buffer is zoomed in.

