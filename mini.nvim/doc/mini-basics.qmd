---
title: "mini.basics documentation"
---

_Generated from the `main` branch of 'mini.nvim'_

<a name="mini.basics" href="mini-basics.qmd#mini.basics"><b>mini.basics</b></a> Common configuration presets

MIT License Copyright (c) 2023 Evgeni Chasnovski

---

### Module {#module .help-syntax-right-anchor}

Install, create 'init.lua', add `require('mini.basics').setup()`, and you
are good to go.

Features:

- Presets for common options. It will only change option if it wasn't
  manually set before. See more in [MiniBasics.config.options](mini-basics.qmd#minibasics.config.options).


- Presets for common mappings. It will only add a mapping if it wasn't
  manually created before. See more in [MiniBasics.config.mappings](mini-basics.qmd#minibasics.config.mappings).


- Presets for common autocommands. See more in [MiniBasics.config.autocommands](mini-basics.qmd#minibasics.config.autocommands).


- Reverse compatibility is a high priority. Any decision to change already
  present behavior will be made with great care.

Notes:

- Main goal of this module is to provide a relatively easier way for
  new-ish Neovim users to have better "works out of the box" experience
  while having documented relevant options/mappings/autocommands to study.
  It is based partially on survey among Neovim users and partially is
  coming from personal preferences.

  However, more seasoned users almost surely will find something useful.

  Still, it is recommended to read about used options/mappings/autocommands
  and decide if they are needed. The main way to do that is by reading
  Neovim's help pages (linked in help file) and this module's source code
  (thoroughly documented for easier comprehension).

#### Setup {#module-setup}


This module needs a setup with `require('mini.basics').setup({})` (replace
`{}` with your `config` table). It will create global Lua table `MiniBasics`
which you can use for scripting or manually (with `:lua MiniBasics.*`).

See [MiniBasics.config](mini-basics.qmd#minibasics.config) for available config settings.

To stop module from showing non-error feedback, set `config.silent = true`.

#### Comparisons {#module-comparisons}



- [tpope/vim-sensible](https://github.com/tpope/vim-sensible):

    - Most of 'tpope/vim-sensible' is already incorporated as default
      options in Neovim (see [nvim-defaults](https://neovim.io/doc/user/helptag.html?tag=nvim-defaults)). This module has a much
      broader effect.

- [tpope/vim-unimpaired](https://github.com/tpope/vim-unimpaired):

    - The 'tpope/vim-unimpaired' has mapping for toggling options with `yo`
      prefix. This module implements similar functionality with `\` prefix
      (see [MiniBasics.config.mappings](mini-basics.qmd#minibasics.config.mappings)).

---

### setup() {#minibasics.setup .help-syntax-right-anchor}

<p align="center">`MiniBasics.setup`(<span class="help-syntax-special">{config}</span>)</p>
Module setup

#### Parameters {#minibasics.setup-parameters}



<span class="help-syntax-special">{config}</span> `(table|nil)` Module config table. See [MiniBasics.config](mini-basics.qmd#minibasics.config).

#### Usage {#minibasics.setup-usage}



  ```lua
  require('mini.basics').setup() -- use default config
  -- OR
  require('mini.basics').setup({}) -- replace {} with your config table
  ```

---

### config {#minibasics.config .help-syntax-right-anchor}

<p align="center">`MiniBasics.config`</p>
#### Defaults {#minibasics.config-defaults}



  ```lua
  MiniBasics.config = {
    -- Options. Set field to `false` to disable.
    options = {
      -- Basic options ('number', 'ignorecase', and many more)
      basic = true,

      -- Extra UI features ('winblend', 'listchars', 'pumheight', ...)
      extra_ui = false,

      -- Presets for window borders ('single', 'double', ...)
      -- Default 'auto' infers from 'winborder' option
      win_borders = 'auto',
    },

    -- Mappings. Set field to `false` to disable.
    mappings = {
      -- Basic mappings (better 'jk', save with Ctrl+S, ...)
      basic = true,

      -- Prefix for mappings that toggle common options ('wrap', 'spell', ...).
      -- Supply empty string to not create these mappings.
      option_toggle_prefix = [[\]],

      -- Window navigation with <C-hjkl>, resize with <C-arrow>
      windows = false,

      -- Move cursor in Insert, Command, and Terminal mode with <M-hjkl>
      move_with_alt = false,
    },

    -- Autocommands. Set field to `false` to disable
    autocommands = {
      -- Basic autocommands (highlight on yank, start Insert in terminal, ...)
      basic = true,

      -- Set 'relativenumber' only in linewise and blockwise Visual mode
      relnum_in_visual_mode = false,
    },

    -- Whether to disable showing non-error feedback
    silent = false,
  }
  ```

#### Options {#minibasics.config-options}


<a name="minibasics.config.options" href="mini-basics.qmd#minibasics.config.options"><b>MiniBasics.config.options</b></a>

Usage example:

  ```lua
  require('mini.basics').setup({
    options = {
      basic = true,
      extra_ui = true,
      win_borders = 'double',
    }
  })
  ```

##### options.basic {#minibasics.config-options-options.basic}


The `config.options.basic` sets certain options to values which are quite
commonly used (judging by study of available Neovim pre-configurations,
public dotfiles, and surveys).
Any option is changed only if it was not set manually beforehand.
For exact changes, please see source code ('lua/mini/basics.lua').

Here is the list of affected options (put cursor on it and press [CTRL-]](https://neovim.io/doc/user/helptag.html?tag=CTRL-])):

- General:

    - Sets [<span class="help-syntax-keys">\<Leader\></span>](https://neovim.io/doc/user/helptag.html?tag=<Leader>) key to [<span class="help-syntax-keys">\<Space\></span>](https://neovim.io/doc/user/helptag.html?tag=<Space>). Be sure to make all Leader mappings
      after this (otherwise they are made with default <span class="help-syntax-keys">\<Leader\></span>).

    - Runs `:filetype plugin indent on` (see [:filetype-overview](https://neovim.io/doc/user/helptag.html?tag=:filetype-overview))

    - ['backup'](https://neovim.io/doc/user/helptag.html?tag='backup')

    - ['mouse'](https://neovim.io/doc/user/helptag.html?tag='mouse')

    - ['undofile'](https://neovim.io/doc/user/helptag.html?tag='undofile')

    - ['writebackup'](https://neovim.io/doc/user/helptag.html?tag='writebackup')

- Appearance

    - ['breakindent'](https://neovim.io/doc/user/helptag.html?tag='breakindent')

    - ['cursorline'](https://neovim.io/doc/user/helptag.html?tag='cursorline')

    - ['fillchars'](https://neovim.io/doc/user/helptag.html?tag='fillchars')

    - ['linebreak'](https://neovim.io/doc/user/helptag.html?tag='linebreak')

    - ['number'](https://neovim.io/doc/user/helptag.html?tag='number')

    - ['ruler'](https://neovim.io/doc/user/helptag.html?tag='ruler')

    - ['showmode'](https://neovim.io/doc/user/helptag.html?tag='showmode')

    - ['signcolumn'](https://neovim.io/doc/user/helptag.html?tag='signcolumn')

    - ['shortmess'](https://neovim.io/doc/user/helptag.html?tag='shortmess')

    - ['splitbelow'](https://neovim.io/doc/user/helptag.html?tag='splitbelow')

    - ['splitkeep'](https://neovim.io/doc/user/helptag.html?tag='splitkeep')

    - ['splitright'](https://neovim.io/doc/user/helptag.html?tag='splitright')

    - ['termguicolors'](https://neovim.io/doc/user/helptag.html?tag='termguicolors') (on Neovim<0.10; later versions have it smartly enabled)

    - ['wrap'](https://neovim.io/doc/user/helptag.html?tag='wrap')

- Editing

    - ['completeopt'](https://neovim.io/doc/user/helptag.html?tag='completeopt')

    - ['formatoptions'](https://neovim.io/doc/user/helptag.html?tag='formatoptions')

    - ['ignorecase'](https://neovim.io/doc/user/helptag.html?tag='ignorecase')

    - ['incsearch'](https://neovim.io/doc/user/helptag.html?tag='incsearch')

    - ['infercase'](https://neovim.io/doc/user/helptag.html?tag='infercase')

    - ['smartcase'](https://neovim.io/doc/user/helptag.html?tag='smartcase')

    - ['smartindent'](https://neovim.io/doc/user/helptag.html?tag='smartindent')

    - ['virtualedit'](https://neovim.io/doc/user/helptag.html?tag='virtualedit')

##### options.extra_ui {#minibasics.config-options-options.extra_ui}


The `config.options.extra_ui` sets certain options for visual appearance
which might not be aligned with common preferences, but still worth trying.
Any option is changed only if it was not set manually beforehand.
For exact changes, please see source code ('lua/mini/basics.lua').

List of affected options:

- ['list'](https://neovim.io/doc/user/helptag.html?tag='list')

- ['listchars'](https://neovim.io/doc/user/helptag.html?tag='listchars')

- ['pumblend'](https://neovim.io/doc/user/helptag.html?tag='pumblend')

- ['pumheight'](https://neovim.io/doc/user/helptag.html?tag='pumheight')

- ['winblend'](https://neovim.io/doc/user/helptag.html?tag='winblend')

- Runs `:syntax on` (see [:syntax-on](https://neovim.io/doc/user/helptag.html?tag=:syntax-on))

##### options.win_borders {#minibasics.config-options-options.win_borders}


The `config.options.win_borders` updates ['fillchars'](https://neovim.io/doc/user/helptag.html?tag='fillchars') to have a consistent set
of characters for window border (`vert`, `horiz`, `msgsep`, etc.).

Available values:

- `'auto'` - infer from ['winborder'](https://neovim.io/doc/user/helptag.html?tag='winborder'). On Neovim<0.11 do nothing.

- `'bold'` - bold lines.

- `'dot'` - dot in every cell.

- `'double'` - double line.

- `'single'` - single line.

- `'solid'` - no symbol, only background.

#### Mappings {#minibasics.config-mappings}


<a name="minibasics.config.mappings" href="mini-basics.qmd#minibasics.config.mappings"><b>MiniBasics.config.mappings</b></a>

Usage example:

  ```lua
  require('mini.basics').setup({
    mappings = {
      basic = true,
      option_toggle_prefix = [[\]],
      windows = true,
      move_with_alt = true,
    }
  })
  ```

If you don't want only some mappings to be made at all, use [vim.keymap.del()](https://neovim.io/doc/user/helptag.html?tag=vim.keymap.del\(\))
after calling [MiniBasics.setup()](mini-basics.qmd#minibasics.setup).

##### mappings.basic {#minibasics.config-mappings-mappings.basic}


The `config.mappings.basic` creates mappings for certain commonly mapped actions
(judging by study of available Neovim pre-configurations and public dotfiles).

Some of the mappings override built-in ones to either improve their
behavior or override its default not very useful action.
It will only add a mapping if it wasn't manually created before.

Here is a table with created mappings :

 ```
 |Keys   |     Modes       |                  Description                  |
 |-------|-----------------|-----------------------------------------------|
 | j     | Normal, Visual  | Move down by visible lines with no [count]    |
 | k     | Normal, Visual  | Move up by visible lines with no [count]      |
 | go    | Normal          | Add [count] empty lines after cursor          |
 | gO    | Normal          | Add [count] empty lines before cursor         |
 | gy    | Normal, Visual  | Copy to system clipboard                      |
 | gp    | Normal, Visual  | Paste from system clipboard                   |
 | gV    | Normal          | Visually select latest changed or yanked text |
 | g/    | Visual          | Search inside current visual selection        |
 | *     | Visual          | Search forward for current visual selection   |
 | #     | Visual          | Search backward for current visual selection  |
 | <C-s> | Normal, Visual, | Save and go to Normal mode                    |
 |       |     Insert      |                                               |
 ```

Notes:

- See [[count]](https://neovim.io/doc/user/helptag.html?tag=[count]) for its meaning.

- On Neovim>=0.10 mappings for `#` and `*` are not created as their
  enhanced variants are made built-in. See [v\_star-default](https://neovim.io/doc/user/helptag.html?tag=v_star-default) and [v\_#-default](https://neovim.io/doc/user/helptag.html?tag=v_#-default).

- On Neovim>=0.11 there are [[<span class="help-syntax-keys">\<Space\></span>](https://neovim.io/doc/user/helptag.html?tag=[<Space>) / []<span class="help-syntax-keys">\<Space\></span>](https://neovim.io/doc/user/helptag.html?tag=]<span class="help-syntax-keys">\<Space\></span>) for adding empty lines.
  The `gO` and `go` mappings are still created as they are more aligned with
  similarly purposed [O](https://neovim.io/doc/user/helptag.html?tag=O) and [o](https://neovim.io/doc/user/helptag.html?tag=o) keys (although sometimes conflict with [gO](https://neovim.io/doc/user/helptag.html?tag=gO)).

##### mappings.option_toggle_prefix {#minibasics.config-mappings-mappings.option_toggle_prefix}


The `config.mappings.option_toggle_prefix` defines a prefix used for
creating mappings that toggle common options. The result mappings will be
`<prefix> + <suffix>`. For example, with default value, `\w` will toggle ['wrap'](https://neovim.io/doc/user/helptag.html?tag='wrap').

Other viable choices for prefix are

- `,` (as a mnemonic for several values to toggle).

- `|` (as a same mnemonic).

- `yo` (used in 'tpope/vim-unimpaired')

- Something with [<span class="help-syntax-keys">\<Leader\></span>](https://neovim.io/doc/user/helptag.html?tag=<Leader>) key, like `<Leader>t` (`t` for "toggle"). Note:
  if your prefix contains `<Leader>` key, make sure to set it before
  calling [MiniBasics.setup()](mini-basics.qmd#minibasics.setup) (as is done with default `basic` field of
  [MiniBasics.config.options](mini-basics.qmd#minibasics.config.options)).

After toggling, there will be a feedback about the current option value if
prior to `require('mini.basics').setup()` module wasn't silenced (see
"Silencing" section in [mini.basics](mini-basics.qmd#mini.basics)).

It will only add a mapping if it wasn't manually created before.

Here is a list of suffixes for created toggling mappings (all in Normal mode):


- `b` - ['background'](https://neovim.io/doc/user/helptag.html?tag='background').

- `c` - ['cursorline'](https://neovim.io/doc/user/helptag.html?tag='cursorline').

- `C` - ['cursorcolumn'](https://neovim.io/doc/user/helptag.html?tag='cursorcolumn').

- `d` - diagnostic (via [vim.diagnostic](https://neovim.io/doc/user/helptag.html?tag=vim.diagnostic) functions).

- `h` - ['hlsearch'](https://neovim.io/doc/user/helptag.html?tag='hlsearch') (or [v:hlsearch](https://neovim.io/doc/user/helptag.html?tag=v:hlsearch) to be precise).

- `i` - ['ignorecase'](https://neovim.io/doc/user/helptag.html?tag='ignorecase').

- `l` - ['list'](https://neovim.io/doc/user/helptag.html?tag='list').

- `n` - ['number'](https://neovim.io/doc/user/helptag.html?tag='number').

- `r` - ['relativenumber'](https://neovim.io/doc/user/helptag.html?tag='relativenumber').

- `s` - ['spell'](https://neovim.io/doc/user/helptag.html?tag='spell').

- `w` - ['wrap'](https://neovim.io/doc/user/helptag.html?tag='wrap').

##### mappings.windows {#minibasics.config-mappings-mappings.windows}


The `config.mappings.windows` creates mappings for easiere window manipulation.

It will only add a mapping if it wasn't manually created before.

Here is a list with created Normal mode mappings (all respect [[count]](https://neovim.io/doc/user/helptag.html?tag=[count])):

- Window navigation:

    - `<C-h>` - focus on left window (see [CTRL-W\_H](https://neovim.io/doc/user/helptag.html?tag=CTRL-W_H)).

    - `<C-j>` - focus on below window (see [CTRL-W\_J](https://neovim.io/doc/user/helptag.html?tag=CTRL-W_J)).

    - `<C-k>` - focus on above window (see [CTRL-W\_K](https://neovim.io/doc/user/helptag.html?tag=CTRL-W_K)).

    - `<C-l>` - focus on right window (see [CTRL-W\_L](https://neovim.io/doc/user/helptag.html?tag=CTRL-W_L)).

- Window resize (all use arrow keys; variants of [:resize](https://neovim.io/doc/user/helptag.html?tag=:resize); respect [[count]](https://neovim.io/doc/user/helptag.html?tag=[count])):

    - `<C-left>`  - decrease window width.

    - `<C-down>`  - decrease window height.

    - `<C-up>`    - increase window height.

    - `<C-right>` - increase window width.

##### mappings.move_with_alt {#minibasics.config-mappings-mappings.move_with_alt}


The `config.mappings.move_with_alt` creates mappings for a more consistent
cursor move in Insert, Command, and Terminal modes. For example, it proves
useful in combination of autopair plugin (like [mini.pairs](mini-pairs.qmd#mini.pairs)) to move right
outside of inserted pairs (no matter what the pair is).

It will only add a mapping if it wasn't manually created before.

Here is a list of created mappings (`<M-x>` means `Alt`/`Meta` plus `x`):

- `<M-h>` - move cursor left.  Modes: Insert, Terminal, Command.

- `<M-j>` - move cursor down.  Modes: Insert, Terminal.

- `<M-k>` - move cursor up.    Modes: Insert, Terminal.

- `<M-l>` - move cursor right. Modes: Insert, Terminal, Command.

#### Autocommands {#minibasics.config-autocommands}


<a name="minibasics.config.autocommands" href="mini-basics.qmd#minibasics.config.autocommands"><b>MiniBasics.config.autocommands</b></a>

Usage example:

  ```lua
  require('mini.basics').setup({
    autocommands = {
      basic = true,
      relnum_in_visual_mode = true,
    }
  })
  ```

##### autocommands.basic {#minibasics.config-autocommands-autocommands.basic}


The `config.autocommands.basic` creates some common autocommands:


- Starts insert mode when opening terminal (see [:startinsert](https://neovim.io/doc/user/helptag.html?tag=:startinsert) and [TermOpen](https://neovim.io/doc/user/helptag.html?tag=TermOpen)).

- Highlights yanked text for a brief period of time (see [vim.hl.on\_yank()](https://neovim.io/doc/user/helptag.html?tag=vim.hl.on_yank\(\));
  on Neovim<0.11 - [vim.hl.on\_yank()](https://neovim.io/doc/user/helptag.html?tag=vim.hl.on_yank\(\))) and [TextYankPost](https://neovim.io/doc/user/helptag.html?tag=TextYankPost)).

##### autocommands.relnum_in_visual_mode {#minibasics.config-autocommands-autocommands.relnum_in_visual_mode}


The `config.autocommands.relnum_in_visual_mode` creates autocommands that
enable ['relativenumber'](https://neovim.io/doc/user/helptag.html?tag='relativenumber') in linewise and blockwise Visual modes and disable
otherwise. See [ModeChanged](https://neovim.io/doc/user/helptag.html?tag=ModeChanged).

---

### toggle_diagnostic() {#minibasics.toggle_diagnostic .help-syntax-right-anchor}

<p align="center">`MiniBasics.toggle_diagnostic`()</p>
Toggle diagnostic for current buffer

This uses [vim.diagnostic](https://neovim.io/doc/user/helptag.html?tag=vim.diagnostic) functions per buffer.

#### Return {#minibasics.toggle_diagnostic-return}


`(string)` String indicator for new state. Similar to what [:set](https://neovim.io/doc/user/helptag.html?tag=:set) `{option}?` shows.

