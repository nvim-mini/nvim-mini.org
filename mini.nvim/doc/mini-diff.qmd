---
title: "mini.diff documentation"
---

_Generated from the `main` branch of 'mini.nvim'_

<a name="mini.diff" href="mini-diff.qmd#mini.diff"><b>mini.diff</b></a> Work with diff hunks

MIT License Copyright (c) 2024 Evgeni Chasnovski

---

### Module {#module .help-syntax-right-anchor}

Features:


- Visualize difference between buffer text and its configurable reference
  interactively (updates as you type). This is done per line showing whether
  it is inside added, changed, or deleted part of difference (called hunk).
  Visualization can be with customizable colored signs or line numbers.


- Special toggleable overlay view with more hunk details inside text area.
  See [MiniDiff.toggle\_overlay()](mini-diff.qmd#minidiff.toggle_overlay).


- Completely configurable per buffer source(s) of reference text used to keep
  it up to date and define interactions with it. Can be array of sources which
  are attempted to attach in order. See [MiniDiff-source-specification](mini-diff.qmd#minidiff-source-specification).
  By default uses Git source. See [MiniDiff.gen\_source.git()](mini-diff.qmd#minidiff.gen_source.git).


- Configurable mappings to manage diff hunks:

    - Apply and reset hunks inside region (selected visually or with
      a dot-repeatable operator).

    - "Hunk range under cursor" textobject to be used as operator target.

    - Navigate to first/previous/next/last hunk. See [MiniDiff.goto\_hunk()](mini-diff.qmd#minidiff.goto_hunk).

What it doesn't do:


- Provide functionality to work directly with Git outside of visualizing
  and staging (applying) hunks with (default) Git source. In particular,
  unstaging hunks is not supported. See [MiniDiff.gen\_source.git()](mini-diff.qmd#minidiff.gen_source.git).

Sources with more details:

- [MiniDiff-overview](mini-diff.qmd#minidiff-overview)

- [MiniDiff-source-specification](mini-diff.qmd#minidiff-source-specification)

- [MiniDiff-hunk-specification](mini-diff.qmd#minidiff-hunk-specification)

- [MiniDiff-diff-summary](mini-diff.qmd#minidiff-diff-summary)

#### Setup {#module-setup}


This module needs a setup with `require('mini.diff').setup({})` (replace
`{}` with your `config` table). It will create global Lua table `MiniDiff`
which you can use for scripting or manually (with `:lua MiniDiff.*`).

See [MiniDiff.config](mini-diff.qmd#minidiff.config) for `config` structure and default values.

You can override runtime config settings locally to buffer inside
`vim.b.minidiff_config` which should have same structure as
`MiniDiff.config`. See [mini.nvim-buffer-local-config](mini-nvim.qmd#mini.nvim-buffer-local-config) for more details.

#### Comparisons {#module-comparisons}



- [lewis6991/gitsigns.nvim](https://github.com/lewis6991/gitsigns.nvim):

    - Main inspiration for this module, so there are many similarities.

    - Can display only Git hunks, while this module has extensible design.

    - Provides more functionality to work with Git outside of hunks.
      This module does not (by design).

#### Highlight groups {#module-highlightgroups}



- `MiniDiffSignAdd`        - "add" hunk lines visualization.

- `MiniDiffSignChange`     - "change" hunk lines visualization.

- `MiniDiffSignDelete`     - "delete" hunk lines visualization.

- `MiniDiffOverAdd`        - added buffer text shown in overlay.

- `MiniDiffOverChange`     - changed reference text shown in overlay.

- `MiniDiffOverChangeBuf`  - changed buffer text shown in overlay.

- `MiniDiffOverContext`    - context of a change shown in reference overlay.

- `MiniDiffOverContextBuf` - context of a change shown in buffer overlay.

- `MiniDiffOverDelete`     - deleted reference text shown in overlay.

To change any highlight group, set it directly with [nvim\_set\_hl()](https://neovim.io/doc/user/helptag.html?tag=nvim_set_hl\(\)).

#### Disabling {#module-disabling}


To temporarily disable features without relying on [MiniDiff.disable()](mini-diff.qmd#minidiff.disable),
set `vim.g.minidiff_disable` (globally) or `vim.b.minidiff_disable` (for
a buffer) to `true`. Considering high number of different scenarios and
customization intentions, writing exact rules for disabling module's
functionality is left to user.
See [mini.nvim-disabling-recipes](mini-nvim.qmd#mini.nvim-disabling-recipes) for common recipes.

---

### Overview {#minidiff-overview .help-syntax-right-anchor}

#### Diffs and hunks {#minidiff-overview-diffsandhunks}


The "diff" (short for "difference") is a result of computing how two text
strings differ from one another. This is done on per line basis, i.e. the
goal is to compute sequences of lines common to both files, interspersed
with groups of differing lines (called "hunks").

Although computing diff is a general concept (used on its own, in Git, etc.),
this module computes difference between current text in a buffer and some
reference text which is kept up to date specifically for that buffer.
For example, default reference text is computed as file content in Git index.
This can be customized in `config.source` (see [MiniDiff-source-specification](mini-diff.qmd#minidiff-source-specification)).

#### Hunk specification {#minidiff-overview-hunkspecification}


<a name="minidiff-hunk-specification" href="mini-diff.qmd#minidiff-hunk-specification"><b>MiniDiff-hunk-specification</b></a>

Hunk describes two sets (one from buffer text, one - from reference) of
consecutive lines which are different. In this module hunk is stored as
a table with the following fields:


- <span class="help-syntax-keys">\<buf_start\></span> `(number)` - start of hunk buffer lines. First line is 1.
  Can be 0 if first reference lines are deleted.


- <span class="help-syntax-keys">\<buf_count\></span> `(number)` - number of consecutive buffer lines. Can be 0 in
  case reference lines are deleted.


- <span class="help-syntax-keys">\<ref_start\></span> `(number)` - start of hunk reference lines. First line is 1.
  Can be 0 if lines are added before first reference line.


- <span class="help-syntax-keys">\<ref_count\></span> `(number)` - number of consecutive reference lines. Can be 0 in
  case buffer lines are added.


- <span class="help-syntax-keys">\<type\></span> `(string)` - hunk type. Can be one of:

    - "add" - lines are present in buffer but absent in reference.

    - "change" - lines are present in both buffer and reference.

    - "delete" - lines are absent in buffer but present in reference.

#### Life cycle {#minidiff-overview-lifecycle}



- When entering proper (not already enabled, valid, showing text) buffer,
  it is attempted to be enabled for diff processing.

- During enabling, attempt attaching the source. This should set up how
  reference text is kept up to date.

- On every text change, diff computation is scheduled in debounced fashion
  after customizable delay (200 ms by default).

- After the diff is computed, do the following:

    - Update visualization based on configurable style: either by placing
      colored text in sign column or coloring line numbers. Colors for both
      styles are defined per hunk type in corresponding `MiniDiffSign*`
      highlight group (see [mini.diff](mini-diff.qmd#mini.diff)) and sign text for "sign" style can
      be configured in `view.signs` of [MiniDiff.config](mini-diff.qmd#minidiff.config).

    - Update overlay view (if it is enabled).

    - Update `vim.b.minidiff_summary` and `vim.b.minidiff_summary_string`
      buffer-local variables. These can be used, for example, in statusline.

    - <a name="minidiff-update-event" href="mini-diff.qmd#minidiff-update-event"><b>MiniDiff-update-event</b></a> Trigger `MiniDiffUpdated` `User` event.
      See [MiniDiff-diff-summary](mini-diff.qmd#minidiff-diff-summary) for example of how to use it.

Notes:

- Use [:edit](https://neovim.io/doc/user/helptag.html?tag=:edit) to reset (disable and re-enable) current buffer.

- To work with BOM bytes, set 'bomb' and have `ucs-bom` in 'fileencodings'.

#### Overlay {#minidiff-overview-overlay}


Along with basic visualization, there is a special view called "overlay".
Although it is meant for temporary overview of diff details and can be
manually toggled via [MiniDiff.toggle\_overlay()](mini-diff.qmd#minidiff.toggle_overlay), text can be changed with
overlay reacting accordingly.

It shows more diff details inside text area:


- Added buffer lines are highlighted with `MiniDiffOverAdd` highlight group.


- Deleted reference lines are shown as virtual lines and highlighted with
  `MiniDiffOverDelete` highlight group.


- "Change" hunks with equal number of buffer/reference lines show "word diff".
  This is usually the case when `options.linematch` is enabled (as by default).
  Reference line is shown next to its buffer counterpart. Changed parts are
  highlighted with `MiniDiffOverChange` and `MiniDiffOverChangeBuf` in reference
  and buffer lines. The rest of lines have `MiniDiffOverContext`
  and `MiniDiffOverContextBuf` highlighting.

  Change with unequal number of buffer/reference lines is shown with reference
  part as virtual lines highlighted with `MiniDiffOverChange` group.
  Corresponding buffer lines are treated as context for the change and are
  highlighted with `MiniDiffOverContextBuf` group.

Notes:

- Word diff has non-zero context width. This means if changed characters
  are close enough, whole range between them is also colored. This usually
  reduces visual noise.

- Virtual lines above line 1 (like deleted or changed lines) need manual
  scroll to become visible (with [CTRL-Y](https://neovim.io/doc/user/helptag.html?tag=CTRL-Y)).

#### Mappings {#minidiff-overview-mappings}


This module provides mappings for common actions with diffs, like:

- Apply and reset hunks.

- "Hunk range under cursor" textobject.

- Go to first/previous/next/last hunk range.

Examples:

- `vip` followed by `gh` / `gH` applies/resets hunks inside current paragraph.
  Same can be achieved in operator form `ghip` / `gHip`, which has the
  advantage of being dot-repeatable (see [single-repeat](https://neovim.io/doc/user/helptag.html?tag=single-repeat)).

- `gh_` / `gH_` applies/resets current line (even if it is not a full hunk).

- `ghgh` / `gHgh` applies/resets hunk range under cursor.

- `dgh` deletes hunk range under cursor.

- `[H` / `[h` / `]h` / `]H` navigate cursor to the first / previous / next / last
  hunk range of the current buffer.

Mappings for some functionality are assumed to be done manually.
See [MiniDiff.operator()](mini-diff.qmd#minidiff.operator).

#### Buffer-local variables {#minidiff-overview-buffer-localvariables}


<a name="minidiff-diff-summary" href="mini-diff.qmd#minidiff-diff-summary"><b>MiniDiff-diff-summary</b></a>

Each enabled buffer has the following buffer-local variables which can be
used in custom statusline to show an overview of hunks in current buffer:


- `vim.b.minidiff_summary` is a table with the following fields:

    - `source_name` - name of the active source. This is the only present field
      if buffer's reference text is not (yet) set.

    - `n_ranges` - number of hunk ranges (sequences of contiguous hunks).

    - `add` - number of added lines.

    - `change` - number of changed lines.

    - `delete` - number of deleted lines.


- `vim.b.minidiff_summary_string` is a string representation of summary
  with a fixed format. Empty string if there is no reference text (yet).
  It is expected to be used as is. To achieve different formatting, use
  `vim.b.minidiff_summary` to construct one. The best way to do this is by
  overriding `vim.b.minidiff_summary_string` inside [MiniDiff-update-event](mini-diff.qmd#minidiff-update-event):

  ```lua
  local format_summary = function(data)
    local summary = vim.b[data.buf].minidiff_summary
    local t = {}
    if summary.add > 0 then table.insert(t, '+' .. summary.add) end
    if summary.change > 0 then table.insert(t, '~' .. summary.change) end
    if summary.delete > 0 then table.insert(t, '-' .. summary.delete) end
    vim.b[data.buf].minidiff_summary_string = table.concat(t, ' ')
  end
  local au_opts = { pattern = 'MiniDiffUpdated', callback = format_summary }
  vim.api.nvim_create_autocmd('User', au_opts)
  ```

---

### setup() {#minidiff.setup .help-syntax-right-anchor}

<p align="center">`MiniDiff.setup`(<span class="help-syntax-special">{config}</span>)</p>
Module setup

#### Parameters {#minidiff.setup-parameters}



<span class="help-syntax-special">{config}</span> `(table|nil)` Module config table. See [MiniDiff.config](mini-diff.qmd#minidiff.config).

#### Usage {#minidiff.setup-usage}



  ```lua
  require('mini.diff').setup() -- use default config
  -- OR
  require('mini.diff').setup({}) -- replace {} with your config table
  ```

---

### config {#minidiff.config .help-syntax-right-anchor}

<p align="center">`MiniDiff.config`</p>
#### Defaults {#minidiff.config-defaults}



  ```lua
  MiniDiff.config = {
    -- Options for how hunks are visualized
    view = {
      -- Visualization style. Possible values are 'sign' and 'number'.
      -- Default: 'number' if line numbers are enabled, 'sign' otherwise.
      style = vim.go.number and 'number' or 'sign',

      -- Signs used for hunks with 'sign' view
      signs = { add = '▒', change = '▒', delete = '▒' },

      -- Priority of used visualization extmarks
      priority = 199,
    },

    -- Source(s) for how reference text is computed/updated/etc
    -- Uses content from Git index by default
    source = nil,

    -- Delays (in ms) defining asynchronous processes
    delay = {
      -- How much to wait before update following every text change
      text_change = 200,
    },

    -- Module mappings. Use `''` (empty string) to disable one.
    mappings = {
      -- Apply hunks inside a visual/operator region
      apply = 'gh',

      -- Reset hunks inside a visual/operator region
      reset = 'gH',

      -- Hunk range textobject to be used inside operator
      -- Works also in Visual mode if mapping differs from apply and reset
      textobject = 'gh',

      -- Go to hunk range in corresponding direction
      goto_first = '[H',
      goto_prev = '[h',
      goto_next = ']h',
      goto_last = ']H',
    },

    -- Various options
    options = {
      -- Diff algorithm. See `:h vim.diff()`.
      algorithm = 'histogram',

      -- Whether to use "indent heuristic". See `:h vim.diff()`.
      indent_heuristic = true,

      -- The amount of second-stage diff to align lines
      linematch = 60,

      -- Whether to wrap around edges during hunk navigation
      wrap_goto = false,
    },
  }
  ```

#### View {#minidiff.config-view}


`config.view` contains settings for how diff hunks are visualized.
Example of using custom signs:

  ```lua
  require('mini.diff').setup({
    view = {
      style = 'sign',
      signs = { add = '+', change = '~', delete = '-' },
    },
  })
  ```

`view.style` is a string defining visualization style. Can be one of "sign"
(as a colored sign in a [sign-column](https://neovim.io/doc/user/helptag.html?tag=sign-column)) or "number" (colored line number).
Default: "number" if ['number'](https://neovim.io/doc/user/helptag.html?tag='number') option is enabled, "sign" otherwise.
Note: with "sign" style it is better to have ['signcolumn'](https://neovim.io/doc/user/helptag.html?tag='signcolumn') always shown.

`view.signs` is a table with one or two character strings used as signs for
corresponding ("add", "change", "delete") hunks.
Default: all hunks use "▒" character resulting in a contiguous colored lines.

`view.priority` is a number with priority used for visualization and
overlay [extmarks](https://neovim.io/doc/user/helptag.html?tag=extmarks).
Default: 199 which is one less than `user` in [vim.hl.priorities](https://neovim.io/doc/user/helptag.html?tag=vim.hl.priorities) (on Neovim<0.11
see [vim.hl.priorities](https://neovim.io/doc/user/helptag.html?tag=vim.hl.priorities)) to have higher priority than automated
extmarks but not as in user enabled ones.

#### Source {#minidiff.config-source}


<a name="minidiff-source-specification" href="mini-diff.qmd#minidiff-source-specification"><b>MiniDiff-source-specification</b></a>

`config.source` is a table with single source or array of them. Single source
defines how reference text is managed in a particular buffer. Sources in array
are attempted to attach in order; call [MiniDiff.disable()](mini-diff.qmd#minidiff.disable) if none attaches.

A single source table can have the following fields:


- <span class="help-syntax-keys">\<attach\></span> `(function)` - callable which defines how and when reference text
  is updated inside a particular buffer. It is used inside [MiniDiff.enable()](mini-diff.qmd#minidiff.enable)
  with a buffer identifier as a single argument.

  Should execute logic which results into calling [MiniDiff.set\_ref\_text()](mini-diff.qmd#minidiff.set_ref_text)
  when reference text for buffer needs to be updated. Like inside callback
  for an [autocommand](https://neovim.io/doc/user/helptag.html?tag=autocommand) or file watcher (see [watch-file](https://neovim.io/doc/user/helptag.html?tag=watch-file)).

  For example, default Git source watches when ".git/index" file is changed
  and computes reference text as the one from Git index for current file.

  Can return `false` to indicate that attach has failed. If attach fail can
  not be inferred immediately (for example, due to asynchronous execution),
  should explicitly call [MiniDiff.fail\_attach()](mini-diff.qmd#minidiff.fail_attach) with appropriate arguments.
  This is important to properly process array of sources.

  No default value, should be always supplied.


- <span class="help-syntax-keys">\<name\></span> `(string|nil)` - source name. String `"unknown"` is used if not supplied.


- <span class="help-syntax-keys">\<detach\></span> `(function|nil)` - callable with cleanup action to be done when
  buffer is disabled. It is called inside [MiniDiff.disable()](mini-diff.qmd#minidiff.disable) with a buffer
  identifier as a single argument.

  If not supplied, nothing is done during detaching.


- <span class="help-syntax-keys">\<apply_hunks\></span> `(function|nil)` - callable which defines how hunks are applied.
  It is called with buffer identifier as first argument and array of hunks
  (see [MiniDiff-hunk-specification](mini-diff.qmd#minidiff-hunk-specification)) as second. It should eventually update
  reference text: either by explicitly calling [MiniDiff.set\_ref\_text()](mini-diff.qmd#minidiff.set_ref_text) or
  performing action triggering its call.

  For example, default Git source computes patch based on the hunks and
  applies it inside file's git repo.

  If not supplied, applying hunks throws an error.

Default: a single [MiniDiff.gen\_source.git()](mini-diff.qmd#minidiff.gen_source.git).

#### Delay {#minidiff.config-delay}


`config.delay` contains settings for delays in asynchronous processes.

`delay.text_change` is a number (in ms) defining how long to wait after latest
text change (in debounced fashion) before updating diff and visualization.
Default: 200.

#### Mappings {#minidiff.config-mappings}


`config.mappings` contains keys which are mapped during [MiniDiff.setup()](mini-diff.qmd#minidiff.setup).

`mappings.apply` keys can be used to apply hunks inside visual/operator region.
What exactly "apply hunks" means depends on the source and its `apply_hunks()`.
For example, in default Git source it means stage hunks.

`mappings.reset` keys can be used to reset hunks inside visual/operator region.
Reset means replacing buffer text in region with corresponding reference text.

`mappings.textobject` keys define "hunk range under cursor" textobject
which can be used in Operator-pending mode as target for operator (like
[d](https://neovim.io/doc/user/helptag.html?tag=d), [y](https://neovim.io/doc/user/helptag.html?tag=y), apply/reset hunks, etc.). It is also set up in Visual mode if
keys do not conflict with `mappings.apply` and `mappings.reset`.
"Hunk range" is used in a sense that contiguous (back-to-back) hunks are
considered as parts of a same hunk range.

`mappings.goto_first` / `mappings.goto_prev` / `mappings.goto_next` /
`mappings.goto_last` keys can be used to navigate to first / previous / next /
last hunk range in the current buffer.

#### Options {#minidiff.config-options}


`config.options` contains various customization options.

`options.algorithm` is a string defining which diff algorithm to use.
Default: "histogram". See [vim.diff()](https://neovim.io/doc/user/helptag.html?tag=vim.diff\(\)) for possible values.

`options.indent_heuristic` is a boolean defining whether to use indent
heuristic for a (possibly) more naturally aligned hunks.
Default: `true`.

`options.linematch` is a number defining hunk size for which a second
stage diff is executed for a better aligned and more granular hunks.
Default: 60. See [vim.diff()](https://neovim.io/doc/user/helptag.html?tag=vim.diff\(\)) and 'diffopt' for more details.

`options.wrap_goto` is a boolean indicating whether to wrap around edges during
hunk navigation (with [MiniDiff.goto\_hunk()](mini-diff.qmd#minidiff.goto_hunk) or `goto_*` mappings). Like if
cursor is after the last hunk, going "next" will put cursor on the first hunk.
Default: `false`.

---

### enable() {#minidiff.enable .help-syntax-right-anchor}

<p align="center">`MiniDiff.enable`(<span class="help-syntax-special">{buf_id}</span>)</p>
Enable diff processing in buffer

#### Parameters {#minidiff.enable-parameters}



<span class="help-syntax-special">{buf_id}</span> `(number)` Target buffer identifier. Default: 0 for current buffer.

---

### disable() {#minidiff.disable .help-syntax-right-anchor}

<p align="center">`MiniDiff.disable`(<span class="help-syntax-special">{buf_id}</span>)</p>
Disable diff processing in buffer

#### Parameters {#minidiff.disable-parameters}



<span class="help-syntax-special">{buf_id}</span> `(number)` Target buffer identifier. Default: 0 for current buffer.

---

### toggle() {#minidiff.toggle .help-syntax-right-anchor}

<p align="center">`MiniDiff.toggle`(<span class="help-syntax-special">{buf_id}</span>)</p>
Toggle diff processing in buffer

Enable if disabled, disable if enabled.

#### Parameters {#minidiff.toggle-parameters}



<span class="help-syntax-special">{buf_id}</span> `(number)` Target buffer identifier. Default: 0 for current buffer.

---

### toggle_overlay() {#minidiff.toggle_overlay .help-syntax-right-anchor}

<p align="center">`MiniDiff.toggle_overlay`(<span class="help-syntax-special">{buf_id}</span>)</p>
Toggle overlay view in buffer

#### Parameters {#minidiff.toggle_overlay-parameters}



<span class="help-syntax-special">{buf_id}</span> `(number)` Target buffer identifier. Default: 0 for current buffer.

---

### export() {#minidiff.export .help-syntax-right-anchor}

<p align="center">`MiniDiff.export`(<span class="help-syntax-special">{format}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Export hunks

Get and convert hunks from current/all buffers. Example of using it:

  ```lua
  -- Set quickfix list from all available hunks
  vim.fn.setqflist(MiniDiff.export('qf'))
  ```

#### Parameters {#minidiff.export-parameters}



<span class="help-syntax-special">{format}</span> `(string)` Output format. Currently only `'qf'` value is supported.

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options. Possible fields:

  - <span class="help-syntax-keys">\<scope\></span> `(string)` - scope defining from which buffers to use hunks.
    One of "all" (all enabled buffers) or "current".

#### Return {#minidiff.export-return}


`(table)` Result of export. Depends on the `format`:

  - If "qf", an array compatible with [setqflist()](https://neovim.io/doc/user/helptag.html?tag=setqflist\(\)) and [setloclist()](https://neovim.io/doc/user/helptag.html?tag=setloclist\(\)).

---

### get_buf_data() {#minidiff.get_buf_data .help-syntax-right-anchor}

<p align="center">`MiniDiff.get_buf_data`(<span class="help-syntax-special">{buf_id}</span>)</p>
Get buffer data

#### Parameters {#minidiff.get_buf_data-parameters}



<span class="help-syntax-special">{buf_id}</span> `(number)` Target buffer identifier. Default: 0 for current buffer.

#### Return {#minidiff.get_buf_data-return}


`(table|nil)` Table with buffer diff data or `nil` if buffer is not enabled.
  Table has the following fields:

  - <span class="help-syntax-keys">\<config\></span> `(table)` - config used for this particular buffer.

  - <span class="help-syntax-keys">\<hunks\></span> `(table)` - array of hunks. See [MiniDiff-hunk-specification](mini-diff.qmd#minidiff-hunk-specification).

  - <span class="help-syntax-keys">\<overlay\></span> `(boolean)` - whether an overlay view is shown.

  - <span class="help-syntax-keys">\<ref_text\></span> `(string|nil)` - current value of reference text. Lines are
    separated with newline character (`'\n'`). Can be `nil` indicating that
    reference text was not yet set (for example, if source did not yet react).

  - <span class="help-syntax-keys">\<summary\></span> `(table)` - overall diff summary. See [MiniDiff-diff-summary](mini-diff.qmd#minidiff-diff-summary).

---

### set_ref_text() {#minidiff.set_ref_text .help-syntax-right-anchor}

<p align="center">`MiniDiff.set_ref_text`(<span class="help-syntax-special">{buf_id}</span>, <span class="help-syntax-special">{text}</span>)</p>
Set reference text for the buffer

Note: this will call [MiniDiff.enable()](mini-diff.qmd#minidiff.enable) for target buffer if it is not
already enabled.

#### Parameters {#minidiff.set_ref_text-parameters}



<span class="help-syntax-special">{buf_id}</span> `(number)` Target buffer identifier. Default: 0 for current buffer.

<span class="help-syntax-special">{text}</span> `(string|table)` New reference text. Either a string with `\n` used to
  separate lines or array of lines. Use empty table to unset current
  reference text (results into no hunks shown). Default: `{}`.
  Note: newline character is appended at the end (if it is not there already)
  for better diffs.

---

### gen_source {#minidiff.gen_source .help-syntax-right-anchor}

<p align="center">`MiniDiff.gen_source`</p>
Generate builtin sources

This is a table with function elements. Call to actually get source.
Examples:

  ```lua
  local diff = require('mini.diff')

  -- Single `save` source
  diff.setup({ source = diff.gen_source.save() })

  -- Multiple sources (attempted to attach in order)
  diff.setup({ source = { diff.gen_source.git(), diff.gen_source.save() } })
  ```

---

### gen_source.git() {#minidiff.gen_source.git .help-syntax-right-anchor}

<p align="center">`MiniDiff.gen_source.git`()</p>
Git source

Default source. Uses file text from Git index as reference. This results in:

- "Add" hunks represent text present in current buffer, but not in index.

- "Change" hunks represent modified text already present in index.

- "Delete" hunks represent text deleted from index.

Applying hunks means staging, a.k.a adding to index.
Notes:

- Requires Git version at least 2.38.0.

- There is no capability for unstaging hunks. Use full Git client for that.

#### Return {#minidiff.gen_source.git-return}


`(table)` Source. See [MiniDiff-source-specification](mini-diff.qmd#minidiff-source-specification).

---

### gen_source.none() {#minidiff.gen_source.none .help-syntax-right-anchor}

<p align="center">`MiniDiff.gen_source.none`()</p>
"Do nothing" source

Allows buffers to be enabled while not setting any reference text.
Use this if the goal is to rely on manual [MiniDiff.set\_ref\_text()](mini-diff.qmd#minidiff.set_ref_text) calls.

#### Return {#minidiff.gen_source.none-return}


`(table)` Source. See [MiniDiff-source-specification](mini-diff.qmd#minidiff-source-specification).

---

### gen_source.save() {#minidiff.gen_source.save .help-syntax-right-anchor}

<p align="center">`MiniDiff.gen_source.save`()</p>
Latest save source

Uses text at latest save as the reference. This results into diff showing
difference after the latest save.

#### Return {#minidiff.gen_source.save-return}


`(table)` Source. See [MiniDiff-source-specification](mini-diff.qmd#minidiff-source-specification).

---

### do_hunks() {#minidiff.do_hunks .help-syntax-right-anchor}

<p align="center">`MiniDiff.do_hunks`(<span class="help-syntax-special">{buf_id}</span>, <span class="help-syntax-special">{action}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Perform action on hunks in region

Compute hunks inside a target region (even for hunks only partially inside it)
and perform apply/reset/yank operation on them.

The "yank" action yanks all reference lines of target hunks into
a specified register (should be one of [registers](https://neovim.io/doc/user/helptag.html?tag=registers)).

Notes:

- Whether hunk is inside a region is computed based on position of its
  buffer lines.

- If "change" or "delete" is only partially inside a target region, all
  reference lines are used in computed "intersection" hunk.

Used directly in `config.mappings.apply` and `config.mappings.reset`.
Usually there is no need to use this function manually.
See [MiniDiff.operator()](mini-diff.qmd#minidiff.operator) for how to set up a mapping for "yank".

#### Parameters {#minidiff.do_hunks-parameters}



<span class="help-syntax-special">{buf_id}</span> `(number)` Target buffer identifier. Default: 0 for current buffer.

<span class="help-syntax-special">{action}</span> `(string)` One of "apply", "reset", "yank".

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options. Possible fields:

  - <span class="help-syntax-keys">\<line_start\></span> `(number)` - start line of the region. Default: 1.

  - <span class="help-syntax-keys">\<line_end\></span> `(number)` - start line of the region. Default: last buffer line.

  - <span class="help-syntax-keys">\<register\></span> `(string)` - register to yank reference lines into.
    Default: [v:register](https://neovim.io/doc/user/helptag.html?tag=v:register).

---

### goto_hunk() {#minidiff.goto_hunk .help-syntax-right-anchor}

<p align="center">`MiniDiff.goto_hunk`(<span class="help-syntax-special">{direction}</span>, <span class="help-syntax-special">{opts}</span>)</p>
Go to hunk range in current buffer

#### Parameters {#minidiff.goto_hunk-parameters}



<span class="help-syntax-special">{direction}</span> `(string)` One of "first", "prev", "next", "last".

<span class="help-syntax-special">{opts}</span> `(table|nil)` Options. A table with fields:

  - <span class="help-syntax-keys">\<n_times\></span> `(number)` - Number of times to advance. Default: [v:count1](https://neovim.io/doc/user/helptag.html?tag=v:count1).

  - <span class="help-syntax-keys">\<line_start\></span> `(number)` - Line number to start from for directions
    "prev" and "next". Default: cursor line.

  - <span class="help-syntax-keys">\<wrap\></span> `(boolean)` - Whether to wrap around edges.
    Default: `options.wrap` value of the config.

---

### operator() {#minidiff.operator .help-syntax-right-anchor}

<p align="center">`MiniDiff.operator`(<span class="help-syntax-special">{mode}</span>)</p>
Perform action over region

Perform action over region defined by marks. Used in mappings.

Example of a mapping to yank reference lines of hunk range under cursor
(assuming default 'config.mappings.textobject'):

  ```lua
  local rhs = function() return MiniDiff.operator('yank') .. 'gh' end
  vim.keymap.set('n', 'ghy', rhs, { expr = true, remap = true })
  ```

#### Parameters {#minidiff.operator-parameters}



<span class="help-syntax-special">{mode}</span> `(string)` One of "apply", "reset", "yank", or the ones used in [g@](https://neovim.io/doc/user/helptag.html?tag=g@).

---

### textobject() {#minidiff.textobject .help-syntax-right-anchor}

<p align="center">`MiniDiff.textobject`()</p>
Select hunk range textobject

Selects all contiguous lines adjacent to cursor line which are in any (not
necessarily same) hunk (if cursor line itself is in hunk).
Used in default mappings.

---

### fail_attach() {#minidiff.fail_attach .help-syntax-right-anchor}

<p align="center">`MiniDiff.fail_attach`(<span class="help-syntax-special">{buf_id}</span>)</p>
Indicate source attach fail

Try to attach next source; if there is none - call [MiniDiff.disable()](mini-diff.qmd#minidiff.disable).

#### Parameters {#minidiff.fail_attach-parameters}



<span class="help-syntax-special">{buf_id}</span> `(integer)` Buffer identifier for which attach has failed.

